import asyncio
import aiogram
import random
import os
import logging
from aiogram import Bot, Dispatcher, types
import openai
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, html, Router, BaseMiddleware, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, InputMediaPhoto, InputMediaVideo
from openai import AsyncOpenAI, OpenAI
# from stickerlist import STICKERLIST
import shelve
import json

from functions import *
from functions2 import *
from menu_functions import *

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_KEY")

TOKEN = BOT_TOKEN

bot = Bot(token=TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
storage = MemoryStorage()
router = Router()
dp = Dispatcher(storage=storage)


class StateMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data: dict):
        state = data['state']
        current_state = await state.get_state()
        data['current_state'] = current_state
        return await handler(event, data)


class UserState(StatesGroup):
    info_coll = State()
    recognition = State()
    yapp = State()
    menu = State()

class Questionnaire(StatesGroup):
    name = State()
    intro = State()
    age = State()
    gender = State()
    location = State()
    allergy = State()
    lifestyle = State()
    phototype = State()
    activity = State()
    water_intake = State()
    stress = State()
    habits = State()
    ethics = State()

class QuestionnaireFace(StatesGroup):
    skin_type = State()
    skin_condition = State()
    skin_issues = State()
    skin_goals = State()

class QuestionnaireBody(StatesGroup):
    body_skin_type = State()
    body_skin_sensitivity = State()
    body_skin_condition = State()
    body_hair_issues = State()
    body_attention_areas = State()
    body_goals = State()

class QuestionnaireHair(StatesGroup):
    scalp_type = State()
    hair_thickness = State()
    hair_length = State()
    hair_structure = State()
    hair_condition = State()
    hair_goals = State()
    washing_frequency = State()
    current_products = State()
    product_texture = State()
    sensitivity = State()
    styling_tools = State()


@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await state.update_data(full_sequence=False)
    buttons = [
        [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "in_dev"
    await message.answer(step0txt, reply_markup=keyboard)




################## MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU ##################
@router.message(Command("menu"))
async def main_menu_handler(message: Message, state: FSMContext) -> None:
    await menu_handler(message, state)

@router.callback_query(lambda c: c.data == 'menu')
async def main_menu_cb_handler(callback_query: CallbackQuery, state: FSMContext) -> None:
    await menu_cb_handler(callback_query, state)

@router.callback_query(lambda c: c.data == 'menu_course')
async def main_process_menu_course(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_course(callback_query.message, state)

@router.callback_query(lambda c: c.data == 'menu_dnevnik')
async def main_process_menu_dnevnik(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_dnevnik(callback_query.message, state)

@router.callback_query(lambda c: c.data == 'menu_nutri')
async def main_process_menu_nutri(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_nutri(callback_query.message, state)

@router.callback_query(lambda c: c.data == 'menu_settings')
async def main_process_menu_settings(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_settings(callback_query.message, state)

@router.message(Command("1"))
async def menu_main_process_menu_course(message: Message, state: FSMContext) -> None:
    await process_menu_course(message, state)

@router.message(Command("2"))
async def menu_main_process_menu_dnevnik(message: Message, state: FSMContext) -> None:
    await process_menu_dnevnik(message, state)

@router.message(Command("3"))
async def menu_main_process_menu_nutri(message: Message, state: FSMContext) -> None:
    await process_menu_nutri(message, state)

@router.message(Command("4"))
async def menu_main_process_menu_settings(message: Message, state: FSMContext) -> None:
    await process_menu_settings(message, state)
################## MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU ##################

################## COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU ##################

@router.callback_query(lambda c: c.data == 'menu_course_lesson_x')
async def main_process_menu_course_lesson(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_course_lesson(callback_query, state)

@router.callback_query(lambda c: c.data == 'menu_course_info')
async def main_process_menu_course_info(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_course_info(callback_query, state)

################## COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU ##################

################## DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU ##################

@router.callback_query(lambda c: c.data == 'menu_dnevnik_input')
async def main_process_menu_dnevnik_input(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_dnevnik_input(callback_query, state)

@router.callback_query(lambda c: c.data == 'menu_dnevnik_redact')
async def main_process_menu_dnevnik_redact(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_dnevnik_redact(callback_query, state)

@router.callback_query(lambda c: c.data == 'menu_dnevnik_analysis')
async def main_process_menu_dnevnik_analysis(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_dnevnik_analysis(callback_query, state)

@router.callback_query(lambda c: c.data == 'menu_dnevnik_instruction')
async def main_process_menu_dnevnik_instruction(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_dnevnik_instruction(callback_query, state)

################## DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU ##################

################## YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU ##################

@router.callback_query(lambda c: c.data == 'menu_nutri_yapp')
async def main_process_menu_nutri_yapp(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_nutri_yapp(callback_query, state)

@router.callback_query(lambda c: c.data == 'menu_nutri_reciepie')
async def main_process_menu_nutri_reciepie(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_nutri_reciepie(callback_query, state)

@router.callback_query(lambda c: c.data == 'menu_nutri_etiketka')
async def main_process_menu_nutri_etiketka(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_nutri_etiketka(callback_query, state)

################## YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU ##################

################## SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU ##################

@router.callback_query(lambda c: c.data == 'menu_settings_profile')
async def main_process_menu_settings_profile(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_settings_profile(callback_query, state)

@router.callback_query(lambda c: c.data == 'menu_settings_help')
async def main_process_menu_settings_help(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_settings_help(callback_query, state)

@router.callback_query(lambda c: c.data == 'menu_settings_sub')
async def main_process_menu_settings_sub(callback_query: CallbackQuery, state: FSMContext):
    await process_menu_settings_sub(callback_query, state)

################## SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU ##################
# @router.message(StateFilter(Questionnaire.name))
# async def process_name(message: types.Message, state: FSMContext):
#     await state.update_data(name=message.text)
#     keyboard = InlineKeyboardMarkup(
#             inline_keyboard=[
#                 [InlineKeyboardButton(text="–≠—Ç–æ —Ç–æ—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞—á–∏–Ω–∞—Ç—å!", callback_data="what_do_you_do")]
#             ]
#         )
#     await state.set_state(Questionnaire.intro)
#     await message.answer(
#         f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!  üåø \n–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ—Å—Ç–∞–≤–∞ –∫–æ—Å–º–µ—Ç–∏–∫–∏ –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤ –Ω–µ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç."    
#         "–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π –∫–æ–∂–µ –∏ –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º.  –ú–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –∞ –∫–∞–∫–∏–µ –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–ª–∫–µ.  –í—Å—ë –ø—Ä–æ—Å—Ç–æ ‚Äî –≤–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—ã–±–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∏–º–µ–Ω–Ω–æ –≤–∞–º!"
#         , reply_markup=keyboard
#     )

# @router.callback_query(StateFilter(Questionnaire.intro), lambda c: c.data == 'what_do_you_do')
# async def process_questionnaire_yapp(callback_query: CallbackQuery, state: FSMContext):
#     await callback_query.message.answer(
#         "–ß—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –±–∞–Ω–æ—á–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å! \n"
#         "ü§î –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∫–µ—Ç—É ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ–Ω–Ω–æ –≤–∞–º. –ì–æ—Ç–æ–≤—ã?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–î–∞", callback_data="agreement_yes"),
#              InlineKeyboardButton(text="–ù–µ—Ç", callback_data="agreement_no")]
#         ])
#     )
#     await callback_query.answer()

                                                  
# @router.callback_query(StateFilter(Questionnaire.intro), lambda c: c.data.startswith("agreement_"))
# async def process_agreement(callback_query: types.CallbackQuery, state: FSMContext):
#     us_id = callback_query.from_user.id
#     print("hit_agreement")
#     if callback_query.data == "agreement_no":
#         text = ( 
#             "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —É –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ –¥–µ–ª, –Ω–æ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ. üòû \n\n"  
#             "–î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–º—É, –∫–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ? Avocado –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º!"
#         )

#         await bot.send_message(us_id, text)
#         await state.clear()

#     elif callback_query.data == "agreement_yes":
#         keyboard = InlineKeyboardMarkup(
#             inline_keyboard=[
#                 [InlineKeyboardButton(text="–≠—Ç–æ —Ç–æ—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞—á–∏–Ω–∞—Ç—å!", callback_data="lesgo")]
#             ]
#         )
#         user_data = await state.get_data()
#         text = (
#             "<b>–ß–∞—Å—Ç—å 1/4</b> üü¢‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è\n"
#             "<b>11 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ç–µ–±–µ </b>\n\n"
#             f"{user_data['name']}, –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ç–≤–æ–µ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚Äì —è –¥–æ–ª–∂–Ω–∞ –∑–Ω–∞—Ç—å –≤—Å—ë –æ —Ç–≤–æ–µ–º —Å—Ç–∏–ª–µ –∂–∏–∑–Ω–∏, —Ñ–æ—Ç–æ—Ç–∏–ø–µ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö. "
#             "–ß—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ç–∞–∫, —á—Ç–æ —è –¥–ª—è —Ç–µ–±—è –æ–¥–æ–±—Ä–∏–ª–∞ —Å—Ä–µ–¥—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–±–µ –ø–æ —ç—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º."
#         )

#         await bot.send_message(us_id, text, reply_markup=keyboard)

# @router.callback_query(StateFilter(Questionnaire.intro), lambda c: c.data == 'lesgo')
# async def process_questionnaire_lesgo(callback_query: CallbackQuery, state: FSMContext):

#     await state.set_state(Questionnaire.age)
#     await callback_query.message.answer(
#         "1) –ù–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ. –°–∫–æ–ª—å–∫–æ –≤–∞–º –≥–æ–¥–∏–∫–æ–≤?   \n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. \n<i>–ù–∞–ø—Ä–∏–º–µ—Ä, 35</i>"
#     )
#     await callback_query.answer()

# @router.message(StateFilter(Questionnaire.age))
# async def process_age(message: types.Message, state: FSMContext):
#     current_data = await state.get_data()
#     print(f"Updated state in process_all_questionnaires: {current_data}")
#     await state.update_data(age=message.text)
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")],
#             [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")]
#         ]
#     )
#     await state.set_state(Questionnaire.gender)
#     await message.answer("2) –¢–≤–æ–π –ø–æ–ª", reply_markup=keyboard)

# @router.callback_query(StateFilter(Questionnaire.gender), lambda c: c.data.startswith("gender_"))
# async def process_gender(callback_query: types.CallbackQuery, state: FSMContext):
#     gender = "–ñ–µ–Ω—Å–∫–∏–π" if callback_query.data == "gender_female" else "–ú—É–∂—Å–∫–æ–π"
#     await state.update_data(gender=gender)
#     await state.set_state(Questionnaire.location)
#     await callback_query.message.answer(
#         "3) –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞ –∏ –∫–ª–∏–º–∞—Ç–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –≥–æ–¥–∞\n"
#         "–ù–∞–ø–∏—à–∏ –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: \n<i>–†–æ—Å—Å–∏—è, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</i>"
#     )
#     await callback_query.answer()

# @router.message(StateFilter(Questionnaire.location))
# async def process_location(message: types.Message, state: FSMContext):
#     await state.update_data(location=message.text)
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="–î–∞", callback_data="allergy_yes")],
#             [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="allergy_no")]
#         ]
#     )
#     await state.set_state(Questionnaire.allergy)
#     await message.answer("4) –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏–º —Ä–µ–∞–∫—Ü–∏—è–º?", reply_markup=keyboard)

# @router.callback_query(StateFilter(Questionnaire.allergy), lambda c: c.data.startswith("allergy_"))
# async def process_allergy(callback_query: types.CallbackQuery, state: FSMContext):
#     allergy = "–î–∞" if callback_query.data == "allergy_yes" else "–ù–µ—Ç"
#     await state.update_data(allergy=allergy)
#     await state.set_state(Questionnaire.lifestyle)
#     await callback_query.message.answer(
#         "5) –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏: –∫–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å? <i>–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</i>\n"
#         "1 - –ß–∞—Å—Ç–æ –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ —Å–æ–ª–Ω—Ü–µ\n"
#         "2 - –†–∞–±–æ—Ç–∞—é –≤ —Å—É—Ö–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏ (—Å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–º –∏–ª–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ–º)\n"
#         "3 - –°–∏–¥—è—á–∞—è –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
#         "4 - –ß–∞—Å—Ç–æ –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–≤—ã—Å–æ–∫–∞—è –ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å)\n"
#         "5 - –ú–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –ø–æ–¥ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π\n"
#         "–£–∫–∞–∂–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤—Å–µ, —á—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ \n<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2)</i>"
#     )
#     await callback_query.answer()

# @router.message(StateFilter(Questionnaire.lifestyle))
# async def process_lifestyle(message: types.Message, state: FSMContext):
#     lifestyle_nums = [int(x) for x in message.text.replace(",", " ").split()]
#     lifestyle_descriptions = {
#         1 : "–ß–∞—Å—Ç–æ –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ —Å–æ–ª–Ω—Ü–µ",
#         2 :  "–†–∞–±–æ—Ç–∞—é –≤ —Å—É—Ö–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏ (—Å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–º –∏–ª–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ–º)",
#         3 : "–°–∏–¥—è—á–∞—è –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
#         4 : "–ß–∞—Å—Ç–æ –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–≤—ã—Å–æ–∫–∞—è –ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å)",
#         5 : "–ú–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –ø–æ–¥ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π",
#     }
#     lifestyle_texts = [lifestyle_descriptions[lifestyle] for lifestyle in lifestyle_nums if lifestyle in lifestyle_descriptions]
#     await state.update_data(lifestyle=lifestyle_texts)

#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[[
#             InlineKeyboardButton(text=str(i), callback_data=f"phototype_{i}") for i in range(1, 7)
#         ]]
#     )
#     await state.set_state(Questionnaire.phototype)
#     await message.answer(
#         "6) –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ç–æ—Ç–∏–ø —Ç–≤–æ–µ–π –∫–æ–∂–∏:\n"
#         "1 ‚Äî –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –Ω–µ –∑–∞–≥–æ—Ä–∞–µ—Ç, —Å—Ä–∞–∑—É –∫—Ä–∞—Å–Ω–µ–µ—Ç\n"
#         "2 ‚Äî –°–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –ª–µ–≥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, –∑–∞–≥–æ—Ä–∞–µ—Ç —Å —Ç—Ä—É–¥–æ–º\n"
#         "3 ‚Äî –°–≤–µ—Ç–ª–∞—è/—Å—Ä–µ–¥–Ω—è—è –∫–æ–∂–∞, —Ä–µ–¥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, –∑–∞–≥–æ—Ä–∞–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ\n"
#         "4 ‚Äî –°—Ä–µ–¥–Ω—è—è/–æ–ª–∏–≤–∫–æ–≤–∞—è –∫–æ–∂–∞, —Ä–µ–¥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, —Ö–æ—Ä–æ—à–æ –∑–∞–≥–æ—Ä–∞–µ—Ç\n"
#         "5 ‚Äî –¢–µ–º–Ω–∞—è –∫–æ–∂–∞, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç, –±—ã—Å—Ç—Ä–æ –∑–∞–≥–æ—Ä–∞–µ—Ç\n"
#         "6 ‚Äî –û—á–µ–Ω—å —Ç–µ–º–Ω–∞—è –∫–æ–∂–∞, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç\n"
#         "–£–∫–∞–∂–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤—Å–µ, —á—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ \n<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2)</i>",
#         reply_markup=keyboard
#     )

# @router.callback_query(StateFilter(Questionnaire.phototype), lambda c: c.data.startswith("phototype_"))
# async def process_phototype(callback_query: types.CallbackQuery, state: FSMContext):
#     phototype = callback_query.data.split("_")[1]
#     phototype_map = {
#         "1": "–û—á–µ–Ω—å —Å–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –Ω–µ –∑–∞–≥–æ—Ä–∞–µ—Ç, —Å—Ä–∞–∑—É –∫—Ä–∞—Å–Ω–µ–µ—Ç",
#         "2": "–°–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –ª–µ–≥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, –∑–∞–≥–æ—Ä–∞–µ—Ç —Å —Ç—Ä—É–¥–æ–º",
#         "3": "–°–≤–µ—Ç–ª–∞—è/—Å—Ä–µ–¥–Ω—è—è –∫–æ–∂–∞, —Ä–µ–¥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, –∑–∞–≥–æ—Ä–∞–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ",
#         "4": "–°—Ä–µ–¥–Ω—è—è/–æ–ª–∏–≤–∫–æ–≤–∞—è –∫–æ–∂–∞, —Ä–µ–¥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, —Ö–æ—Ä–æ—à–æ –∑–∞–≥–æ—Ä–∞–µ—Ç",
#         "5": "–¢–µ–º–Ω–∞—è –∫–æ–∂–∞, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç, –±—ã—Å—Ç—Ä–æ –∑–∞–≥–æ—Ä–∞–µ—Ç",
#         "6": "–û—á–µ–Ω—å —Ç–µ–º–Ω–∞—è –∫–æ–∂–∞, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç",
#     }
#     description = phototype_map.get(phototype, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ç–æ—Ç–∏–ø")
#     await state.update_data(phototype=description)
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="–ù–∏–∑–∫–∞—è", callback_data="activity_low")],
#             [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω—è—è", callback_data="activity_mid")],
#             [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∞—è", callback_data="activity_high")]
#         ]
#     )
#     await state.set_state(Questionnaire.activity)
#     await callback_query.message.answer("7) –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?", reply_markup=keyboard)
#     await callback_query.answer()

# @router.callback_query(StateFilter(Questionnaire.activity), lambda c: c.data.startswith("activity_"))
# async def process_activity(callback_query: types.CallbackQuery, state: FSMContext):
#     activity_map = {
#         "activity_low": "–ù–∏–∑–∫–∞—è",
#         "activity_mid": "–°—Ä–µ–¥–Ω—è—è",
#         "activity_high": "–í—ã—Å–æ–∫–∞—è"
#     }
#     activity = activity_map[callback_query.data]
#     await state.update_data(activity=activity)
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="–ú–µ–Ω—å—à–µ 1 –ª–∏—Ç—Ä–∞", callback_data="water_<1")],
#             [InlineKeyboardButton(text="1‚Äì2 –ª–∏—Ç—Ä–∞", callback_data="water_1-2")],
#             [InlineKeyboardButton(text="–ë–æ–ª–µ–µ 2 –ª–∏—Ç—Ä–æ–≤", callback_data="water_>2")]
#         ]
#     )
#     await state.set_state(Questionnaire.water_intake)
#     await callback_query.message.answer("8) –°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –ø—å–µ—à—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ?", reply_markup=keyboard)
#     await callback_query.answer()

# @router.callback_query(StateFilter(Questionnaire.water_intake), lambda c: c.data.startswith("water_"))
# async def process_water_intake(callback_query: types.CallbackQuery, state: FSMContext):
#     water_map = {
#         "water_<1": "–ú–µ–Ω—å—à–µ 1 –ª–∏—Ç—Ä–∞",
#         "water_1-2": "1‚Äì2 –ª–∏—Ç—Ä–∞",
#         "water_>2": "–ë–æ–ª–µ–µ 2 –ª–∏—Ç—Ä–æ–≤"
#     }
#     water_intake = water_map[callback_query.data]
#     await state.update_data(water_intake=water_intake)
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="–ù–∏–∑–∫–∏–π", callback_data="stress_low")],
#             [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data="stress_mid")],
#             [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–π", callback_data="stress_high")]
#         ]
#     )
#     await state.set_state(Questionnaire.stress)
#     await callback_query.message.answer("9) –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏?", reply_markup=keyboard)
#     await callback_query.answer()

# @router.callback_query(StateFilter(Questionnaire.stress), lambda c: c.data.startswith("stress_"))
# async def process_stress(callback_query: types.CallbackQuery, state: FSMContext):
#     stress_map = {
#         "stress_low": "–ù–∏–∑–∫–∏–π",
#         "stress_mid": "–°—Ä–µ–¥–Ω–∏–π",
#         "stress_high": "–í—ã—Å–æ–∫–∏–π"
#     }
#     stress = stress_map[callback_query.data]
#     await state.update_data(stress=stress)
#     stress_message_map = {
#         "stress_low": "–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —Ç—ã –æ—á–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π —á–µ–ª–æ–≤–µ–∫! –†–µ–¥–∫–æ—Å—Ç—å üåç",
#         "stress_mid": "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–∞–º–æ–ø–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–ª–∏–∑–∫–∏—Öüíñ",
#         "stress_high": "–û—á–µ–Ω—å –∏ –æ—á–µ–Ω—å —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—é! –ë–æ–ª—å—à–µ 70% –ª—é–¥–µ–π –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã –≤—ã—Å–æ–∫–æ–º—É —Å—Ç—Ä–µ—Å—Å—É, –Ω–µ –∑–∞–±—ã–≤–∞–π —Å–µ–±—è –∏–Ω–æ–≥–¥–∞ —Å–∏–ª—å–Ω–æ-—Å–∏–ª—å–Ω–æ –±–∞–ª–æ–≤–∞—Ç—å üå∏"
#     }
#     await callback_query.message.answer(stress_message_map[callback_query.data])
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="–ö—É—Ä–µ–Ω–∏–µ", callback_data="habits_smoking")],
#             [InlineKeyboardButton(text="–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è", callback_data="habits_drinking")],
#             [InlineKeyboardButton(text="–ö—É—Ä–µ–Ω–∏–µ –∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è", callback_data="habits_both")],
#             [InlineKeyboardButton(text="–ù–µ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫", callback_data="habits_none")]
#         ]
#     )
#     await state.set_state(Questionnaire.habits)
#     await callback_query.message.answer("10) –ö–∞–∫–∞—è –∏–∑ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ —Ç–µ–±–µ —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–∞?", reply_markup=keyboard)
#     await callback_query.answer()

# @router.callback_query(StateFilter(Questionnaire.habits), lambda c: c.data.startswith("habits_"))
# async def process_habits(callback_query: types.CallbackQuery, state: FSMContext):
#     habits_map = {
#         "habits_smoking": "–ö—É—Ä–µ–Ω–∏–µ",
#         "habits_drinking": "–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è",
#         "habits_both": "–ö—É—Ä–µ–Ω–∏–µ –∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è",
#         "habits_none": "–ù–µ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"
#     }
#     habits = habits_map[callback_query.data]
#     await state.update_data(habits=habits)
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤, Vegan –ø—Ä–æ–¥—É–∫—Ç –∏ Cruelty-free", callback_data="ethics_cruelty_free")],
#             [InlineKeyboardButton(text="–≠—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è", callback_data="ethics_none")]
#         ]
#     )
#     await state.set_state(Questionnaire.ethics)
#     await callback_query.message.answer("11) –≠—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: —á—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–æ –≤ –∫–æ—Å–º–µ—Ç–∏–∫–µ?", reply_markup=keyboard)
#     await callback_query.answer()

# @router.callback_query(StateFilter(Questionnaire.ethics), lambda c: c.data.startswith("ethics_"))
# async def process_ethics(callback_query: types.CallbackQuery, state: FSMContext):
#     ethics = "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤, Vegan –ø—Ä–æ–¥—É–∫—Ç –∏ Cruelty-free" if callback_query.data == "ethics_cruelty_free" else "–≠—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"
#     us_id = callback_query.from_user.id
#     await state.update_data(ethics=ethics)
#     user_data = await state.get_data()
#     await callback_query.message.answer(
#         "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
#         f"–ò–º—è: {user_data['name']}\n"
#         f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
#         f"–ü–æ–ª: {user_data['gender']}\n"
#         f"–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {user_data['location']}\n"
#         f"–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∞–ª–ª–µ—Ä–≥–∏–∏: {user_data['allergy']}\n"
#         f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏: {', '.join(map(str, user_data['lifestyle']))}\n"
#         f"–§–æ—Ç–æ—Ç–∏–ø: {user_data['phototype']}\n"
#         f"–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data['activity']}\n"
#         f"–ü–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º: {user_data['water_intake']}\n"
#         f"–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {user_data['stress']}\n"
#         f"–í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏: {user_data['habits']}\n"
#         f"–≠—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {user_data['ethics']}"
#     )

#     user_data_gen = {
#                 "name": f"{user_data['name']}",
#                 "age": f"{user_data['age']}",
#                 "gender": f"{user_data['gender']}",
#                 "location": f"{user_data['location']}",
#                 "allergy": f"{user_data['allergy']}",
#                 "lifestyle": f"{user_data['lifestyle']}",
#                 "phototype": f"{user_data['phototype']}",
#                 "activity": f"{user_data['activity']}",
#                 "water_intake": f"{user_data['water_intake']}",
#                 "stress": f"{user_data['stress']}",
#                 "habits": f"{user_data['habits']}"
#             }
#     response = await send_user_data(us_id, user_data_gen, "SetUserBaseData", "user_data")
#     await callback_query.message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ: {response}")

#     full_sequence = user_data.get("full_sequence", False)
#     if full_sequence:
#         await process_questionnaire_face(callback_query, state)
#     else:
#         await state.clear()
#         await callback_query.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")


# @router.callback_query(StateFilter(QuestionnaireFace.skin_type), lambda c: True)
# async def process_face_skin_type(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(face_skin_type=callback_query.data)
#     current_data = await state.get_data()
#     print(f"Updated state in process_all_questionnaires: {current_data}")
#     await state.set_state(QuestionnaireFace.skin_condition)
#     await callback_query.message.answer(
#         "13) –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏ —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–û–±–µ–∑–≤–æ–∂–µ–Ω–Ω–∞—è", callback_data="dehydrated")],
#             [InlineKeyboardButton(text="–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è", callback_data="sensitive")],
#             [InlineKeyboardButton(text="–ù–æ—Ä–º–∞–ª—å–Ω–∞—è", callback_data="normal")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireFace.skin_condition), lambda c: True)
# async def process_face_skin_condition(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(face_skin_condition=callback_query.data)
#     await state.set_state(QuestionnaireFace.skin_issues)
#     pre_message_map = {
#         "dehydrated": "–£–∂–µ —Å–µ–π—á–∞—Å –º–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –∏ –≤—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω—á–∏–∫ –≤–æ–¥—ã, —è –Ω–∏–∫—É–¥–∞ –Ω–µ —É–±–µ–≥—É üí¶",
#         "sensitive": "–•–æ—Ä–æ—à–æ —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—é, –º—É—Ö–∞ –º–∏–º–æ –ø—Ä–æ–ª–µ—Ç–∏—Ç, –∞ —É –º–µ–Ω—è —É–∂–µ –≤—Å—ë –∫—Ä–∞—Å–Ω–µ–µ—Ç ü¶ã",
#         "normal": "–ù–µ –º–Ω–æ–≥–∏–µ –º–æ–≥—É—Ç —Ç–∞–∫–∏–º –ø–æ—Ö–≤–∞—Å—Ç–∞—Ç—å—Å—è ‚ú®üçÉ"
#     }
#     await callback_query.message.answer(pre_message_map[callback_query.data])
#     await callback_query.message.answer(
#         "14) –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∫–∞–∫–∏–µ-–ª–∏–±–æ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è —Å –∫–æ–∂–µ–π –Ω–∞ –ª–∏—Ü–µ?\n"
#         "1 - –ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è\n"
#         "2 - –ù–µ—Ä–æ–≤–Ω—ã–π —Ç–æ–Ω\n"
#         "3 - –ê–∫–Ω–µ, –ø–æ—Å—Ç–∞–∫–Ω–µ\n"
#         "4 - –†—É–±—Ü—ã –∏ —à—Ä–∞–º—ã\n"
#         "5 - –ú–æ—Ä—â–∏–Ω—ã\n"
#         "6 - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä—ã\n"
#         "7 - –û—Ç–∫—Ä—ã—Ç—ã–µ –∏/–∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–æ–º–µ–¥–æ–Ω—ã\n"
#         "8 - –°–æ—Å—É–¥–∏—Å—Ç—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è\n"
#         "9 - –°—É—Ö–æ—Å—Ç—å, —à–µ–ª—É—à–µ–Ω–∏–µ\n"
#         "10 - –ù–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–æ–±–ª–µ–º\n\n"
#         "–í—ã–±–∏—Ä–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –ø–∏—à–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–æ–º. \n<i>–¢–∏–ø–æ: (1,4,6) –∏–ª–∏ (1 4 5)</i>",
#         reply_markup=None
#     )
#     await callback_query.answer()

# @router.message(StateFilter(QuestionnaireFace.skin_issues))
# async def process_face_skin_issues(message: types.Message, state: FSMContext):
#     # issues = [int(x) for x in message.text.replace(",", " ").split()]
#     goals = [int(x) for x in message.text.replace(",", " ").split()]
#     goal_descriptions = {
#         1 : "–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è",
#         2 :  "–ù–µ—Ä–æ–≤–Ω—ã–π —Ç–æ–Ω",
#         3 : "–ê–∫–Ω–µ, –ø–æ—Å—Ç–∞–∫–Ω–µ",
#         4 : "–†—É–±—Ü—ã –∏ —à—Ä–∞–º—ã",
#         5 : "–ú–æ—Ä—â–∏–Ω—ã",
#         6 : "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä—ã",
#         7 : "–û—Ç–∫—Ä—ã—Ç—ã–µ –∏/–∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–æ–º–µ–¥–æ–Ω—ã",
#         8 : "–°–æ—Å—É–¥–∏—Å—Ç—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è",
#         9 : "–°—É—Ö–æ—Å—Ç—å, —à–µ–ª—É—à–µ–Ω–∏–µ",
#         10 : "–ù–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–æ–±–ª–µ–º",
#     }
#     goal_texts = [goal_descriptions[goal] for goal in goals if goal in goal_descriptions]
#     await state.update_data(face_skin_issues=goal_texts)
#     await state.set_state(QuestionnaireFace.skin_goals)
#     await message.answer(
#         "15) –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ç—ã –º–æ–≥–ª–∞ –±—ã —Å–µ–±–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–∂–∏ –ª–∏—Ü–∞? \n"
#         "1 - –£–≤–ª–∞–∂–Ω—ë–Ω–Ω–∞—è –∏ –≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞\n"
#         "2 - –°–∏—è—é—â–∞—è —Å–≤–µ–∂–∞—è –∫–æ–∂–∞\n"
#         "3 - –£–±—Ä–∞—Ç—å –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫\n"
#         "4 - –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Ä\n"
#         "5 - –£–±—Ä–∞—Ç—å —á—ë—Ä–Ω—ã–µ —Ç–æ—á–∫–∏\n"
#         "6 - –£–±—Ä–∞—Ç—å –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è –∏ –ø–æ—Å—Ç–∞–∫–Ω–µ\n"
#         "7 - –£–±—Ä–∞—Ç—å –º–æ—Ä—â–∏–Ω—ã\n"
#         "8 - –í—ã—Ä–æ–≤–Ω—è—Ç—å —Ç–æ–Ω\n"
#         "9 - –£–º–µ–Ω—å—à–∏—Ç—å \"–º–µ—à–∫–∏\" –∏ —Ç—ë–º–Ω—ã–µ –∫—Ä—É–≥–∏ –ø–æ–¥ –≥–ª–∞–∑–∞–º–∏\n"
#         "10 - –°–Ω—è—Ç—å –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ\n\n"
#         "–í—ã–±–∏—Ä–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –ø–∏—à–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–æ–º. \n<i>–¢–∏–ø–æ: (1,4,6) –∏–ª–∏ (1 4 5)</i>",
#         reply_markup=None
#     )

# @router.message(StateFilter(QuestionnaireFace.skin_goals))
# async def process_face_skin_goals(message: types.Message, state: FSMContext):
#     goals = [int(x) for x in message.text.replace(",", " ").split()]
#     goal_descriptions = {
#         1 : "–£–≤–ª–∞–∂–Ω—ë–Ω–Ω–∞—è –∏ –≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞",
#         2 :  "–°–∏—è—é—â–∞—è —Å–≤–µ–∂–∞—è –∫–æ–∂–∞",
#         3 : "–£–±—Ä–∞—Ç—å –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫",
#         4 : "–ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Ä",
#         5 : "–£–±—Ä–∞—Ç—å —á—ë—Ä–Ω—ã–µ —Ç–æ—á–∫–∏",
#         6 : "–£–±—Ä–∞—Ç—å –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è –∏ –ø–æ—Å—Ç–∞–∫–Ω–µ",
#         7 : "–£–±—Ä–∞—Ç—å –º–æ—Ä—â–∏–Ω—ã",
#         8 : "–í—ã—Ä–æ–≤–Ω—è—Ç—å —Ç–æ–Ω",
#         9 : "–£–º–µ–Ω—å—à–∏—Ç—å \"–º–µ—à–∫–∏\" –∏ —Ç—ë–º–Ω—ã–µ –∫—Ä—É–≥–∏ –ø–æ–¥ –≥–ª–∞–∑–∞–º–∏",
#         10 : "–°–Ω—è—Ç—å –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ",
#     }
#     goal_texts = [goal_descriptions[goal] for goal in goals if goal in goal_descriptions]
#     await state.update_data(face_skin_goals=goal_texts)
#     user_data = await state.get_data()
#     await message.answer(
#         "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
#         f"–¢–∏–ø –∫–æ–∂–∏: {user_data['face_skin_type']}\n"
#         f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏: {user_data['face_skin_condition']}\n"
#         f"–ü—Ä–æ–±–ª–µ–º—ã –∫–æ–∂–∏: {', '.join(map(str, user_data['face_skin_issues']))}\n"
#         f"–¶–µ–ª–∏ —É—Ö–æ–¥–∞: {', '.join(map(str, user_data['face_skin_goals']))}"
#     )
#     us_id = message.from_user.id

#     user_face_data = {
#                 "face_skin_type": f"–¢–∏–ø –∫–æ–∂–∏: {user_data['face_skin_type']}",
#                 "face_skin_condition": f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏: {user_data['face_skin_condition']}",
#                 "face_skin_issues": f"–ü—Ä–æ–±–ª–µ–º—ã –∫–æ–∂–∏: {', '.join(map(str, user_data['face_skin_issues']))}",
#                 "face_skin_goals": f"–¶–µ–ª–∏ —É—Ö–æ–¥–∞: {', '.join(map(str, user_data['face_skin_goals']))}",
#             }
#     response = await send_user_data(us_id, user_face_data, "SetUserFaceData", "user_face_data")
#     await message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ: {response}")

#     full_sequence = user_data.get("full_sequence", False)
#     if full_sequence:
#         print(f"leaving_questionnaire with full_seq:{full_sequence}")
#         await start_body_questionnaire(message.from_user.id, state)
#     else:
#         await state.clear()
#         await message.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

# @router.callback_query(StateFilter(QuestionnaireBody.body_skin_type), lambda c: True)
# async def process_body_skin_type(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(body_skin_type=callback_query.data)
#     await state.set_state(QuestionnaireBody.body_skin_sensitivity)
#     await callback_query.message.answer(
#         "17) –£–∫–∞–∂–∏ —Å—Ç–µ–ø–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–∂–∏ —Ç–µ–ª–∞:",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è", callback_data="sensitive")],
#             [InlineKeyboardButton(text="–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="normal")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireBody.body_skin_sensitivity), lambda c: True)
# async def process_body_skin_sensitivity(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(body_skin_sensitivity=callback_query.data)
#     await state.set_state(QuestionnaireBody.body_skin_condition)
#     pre_message_map = {
#         "sensitive": "–Ø —Ç–æ–∂–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏ –∫ –ø–æ–≥–æ–¥–µ, –∏ –∫ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è–º, –∏ –¥–∞–∂–µ –∫ –ø–ª–æ—Ç–Ω–æ–π –æ–¥–µ–∂–¥–µ üíî",
#         "normal": "–ê —Ç—ã —Å—á–∞—Å—Ç–ª–∏–≤—ã–π —á–µ–ª–æ–≤–µ–∫, —è –≤–æ—Ç –¥–æ–≤–æ–ª—å–Ω–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏ –∫ –ø–æ–≥–æ–¥–µ, –∏ –∫ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏—è–º, –∏ –¥–∞–∂–µ –∫ –ø–ª–æ—Ç–Ω–æ–π –æ–¥–µ–∂–¥–µ üíî"
#     }
#     await callback_query.message.answer(pre_message_map[callback_query.data])
#     await callback_query.message.answer(
#         "18) –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏ –Ω–∞ —Ç–µ–ª–µ:",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–°—É—Ö–æ—Å—Ç—å –∏ —à–µ–ª—É—à–µ–Ω–∏–µ", callback_data="dryness")],
#             [InlineKeyboardButton(text="–ü–æ—Ç–µ—Ä—è —É–ø—Ä—É–≥–æ—Å—Ç–∏", callback_data="loss_of_elasticity")],
#             [InlineKeyboardButton(text="–¶–µ–ª–ª—é–ª–∏—Ç", callback_data="cellulite")],
#             [InlineKeyboardButton(text="–ê–∫–Ω–µ/–ø—Ä—ã—â–∏ –Ω–∞ —Ç–µ–ª–µ", callback_data="acne")],
#             [InlineKeyboardButton(text="–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="pigmentation")],
#             [InlineKeyboardButton(text="–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è", callback_data="redness")],
#             [InlineKeyboardButton(text="–¢—Ä–µ—â–∏–Ω—ã –Ω–∞ –∫–æ–∂–µ", callback_data="cracks")],
#             [InlineKeyboardButton(text="–ú–æ—Ä—â–∏–Ω—ã", callback_data="wrinkles")],
#             [InlineKeyboardButton(text="–ù–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–æ–±–ª–µ–º", callback_data="no_problems")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireBody.body_skin_condition), lambda c: True)
# async def process_body_skin_condition(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(body_skin_condition=callback_query.data)
#     await state.set_state(QuestionnaireBody.body_hair_issues)
#     await callback_query.message.answer(
#         "19) –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–æ–ª–æ—Å–∞–º–∏ –Ω–∞ —Ç–µ–ª–µ?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–í—Ä–æ—Å—à–∏–µ –≤–æ–ª–æ—Å—ã", callback_data="ingrown_hairs")],
#             [InlineKeyboardButton(text="–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–ø–∏–ª—è—Ü–∏–∏", callback_data="irritation")],
#             [InlineKeyboardButton(text="–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º", callback_data="no_problems")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireBody.body_hair_issues), lambda c: True)
# async def process_body_hair_issues(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(body_hair_issues=callback_query.data)
#     await state.set_state(QuestionnaireBody.body_attention_areas)
#     pre_message_map = {
#         "ingrown_hairs": "–°–æ—á—É–≤—Å—Ç–≤—É—é –æ—Ç –≤—Å–µ–π –¥—É—à–∏, –Ω–æ –º—ã –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–ºü•∫",
#         "irritation": "–°–æ—á—É–≤—Å—Ç–≤—É—é –æ—Ç –≤—Å–µ–π –¥—É—à–∏, –Ω–æ –º—ã –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–ºü•∫",
#         "no_problems": "–í–µ–∑—É–Ω—á–∏–∫! –°–∞–º—ã–π –Ω–∞—Å—Ç–æ—è—â–∏–πüòú"
#     }
#     await callback_query.message.answer(pre_message_map[callback_query.data])
#     await callback_query.message.answer(
#         "20) –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —É—á–∞—Å—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ (–±–æÃÅ–ª—å—à–µ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ —Å–µ—Ä—å–µ–∑–Ω—ã–µ —Ç—Ä–µ—â–∏–Ω—ã)?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–õ–æ–∫—Ç–∏", callback_data="elbows")],
#             [InlineKeyboardButton(text="–ö–æ–ª–µ–Ω–∏", callback_data="knees")],
#             [InlineKeyboardButton(text="–°–ø–∏–Ω–∞", callback_data="back")],
#             [InlineKeyboardButton(text="–ü—è—Ç–∫–∏", callback_data="heels")],
#             [InlineKeyboardButton(text="–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º", callback_data="no_problems")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireBody.body_attention_areas), lambda c: True)
# async def process_body_attention_areas(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(body_attention_areas=callback_query.data)
#     await state.set_state(QuestionnaireBody.body_goals)
#     await callback_query.message.answer(
#         "21) –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ç—ã –º–æ–≥–ª–∞ –±—ã —Å–µ–±–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–∂–∏ —Ç–µ–ª–∞?\n"
#         "1 - –£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ\n"
#         "2 - –ü–∏—Ç–∞–Ω–∏–µ\n"
#         "3 - –°–º—è–≥—á–µ–Ω–∏–µ\n"
#         "4 - –¢–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
#         "5 - –û—Ç—à–µ–ª—É—à–∏–≤–∞–Ω–∏–µ\n"
#         "6 - –ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç\n"
#         "7 - –û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ –∫–æ–∂–∏\n"
#         "8 - –°–Ω—è—Ç–∏–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–π\n"
#         "9 - –ó–∞—â–∏—Ç–∞ –∫–æ–∂–∏\n"
#         "10 - –ú–∞—Å—Å–∞–∂\n"
#         "11 - –£–±—Ä–∞—Ç—å –≤—Ä–æ—Å—à–∏–µ –≤–æ–ª–æ—Å—ã\n"
#         "12 - –£–±—Ä–∞—Ç—å –∞–∫–Ω–µ\n"
#         "13 - –ß—Ç–æ–±—ã —Å—Ä–µ–¥—Å—Ç–≤–æ –≤–∫—É—Å–Ω–æ –ø–∞—Ö–ª–æ"
#         "–í—ã–±–∏—Ä–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –ø–∏—à–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–æ–º. \n<i>–¢–∏–ø–æ: (1,4,6) –∏–ª–∏ (1 4 5)</i>",
#         reply_markup=None
#     )

# @router.message(StateFilter(QuestionnaireBody.body_goals))
# async def process_body_goals(message: types.Message, state: FSMContext):
#     goals = [int(x) for x in message.text.replace(",", " ").split()]
#     goal_descriptions = {
#         1 : "–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ",
#         2 :  "–ü–∏—Ç–∞–Ω–∏–µ",
#         3 : "–°–º—è–≥—á–µ–Ω–∏–µ",
#         4 : "–¢–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
#         5 : "–û—Ç—à–µ–ª—É—à–∏–≤–∞–Ω–∏–µ",
#         6 : "–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç",
#         7 : "–û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ –∫–æ–∂–∏",
#         8 : "–°–Ω—è—Ç–∏–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–π",
#         9 : "–ó–∞—â–∏—Ç–∞ –∫–æ–∂–∏",
#         10 : "–ú–∞—Å—Å–∞–∂",
#         11 : "–£–±—Ä–∞—Ç—å –≤—Ä–æ—Å—à–∏–µ –≤–æ–ª–æ—Å—ã",
#         12 : "–£–±—Ä–∞—Ç—å –∞–∫–Ω–µ",
#         13 : "–ß—Ç–æ–±—ã —Å—Ä–µ–¥—Å—Ç–≤–æ –≤–∫—É—Å–Ω–æ –ø–∞—Ö–ª–æ",
#     }
#     goal_texts = [goal_descriptions[goal] for goal in goals if goal in goal_descriptions]
#     await state.update_data(body_goals=goal_texts)
#     user_data = await state.get_data()
#     print(f"user: {message.from_user.id}, full_seq: {user_data.get("full_sequence")}")
#     await message.answer(
#         "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
#         f"–¢–∏–ø –∫–æ–∂–∏ —Ç–µ–ª–∞: {user_data['body_skin_type']}\n"
#         f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–∂–∏: {user_data['body_skin_sensitivity']}\n"
#         f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏: {user_data['body_skin_condition']}\n"
#         f"–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–æ–ª–æ—Å–∞–º–∏: {user_data['body_hair_issues']}\n"
#         f"–£—á–∞—Å—Ç–∫–∏ —Å –æ—Å–æ–±—ã–º–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏: {user_data['body_attention_areas']}\n"
#         f"–¶–µ–ª–∏ —É—Ö–æ–¥–∞: {', '.join(map(str, user_data['body_goals']))}"
#     )

#     us_id = message.from_user.id

#     user_body_data = {
#                 "body_skin_type": f"–¢–∏–ø –∫–æ–∂–∏ —Ç–µ–ª–∞: {user_data['body_skin_type']}",
#                 "body_skin_sensitivity": f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–∂–∏: {user_data['body_skin_sensitivity']}",
#                 "body_skin_condition": f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏: {user_data['body_skin_condition']}",
#                 "body_hair_issues": f"–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–æ–ª–æ—Å–∞–º–∏: {user_data['body_hair_issues']}",
#                 "body_attention_areas": f"–£—á–∞—Å—Ç–∫–∏ —Å –æ—Å–æ–±—ã–º–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏: {user_data['body_attention_areas']}",
#                 "body_goals": f"–¶–µ–ª–∏ —É—Ö–æ–¥–∞: {', '.join(map(str, user_data['body_goals']))}",
#             }

#     response = await send_user_data(us_id, user_body_data, "SetUserBodyData", "user_body_data")
#     await message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ: {response}")

#     full_sequence = user_data.get("full_sequence", False)
#     if full_sequence:
#         await start_hair_questionnaire(message.from_user.id, state)
#     else:
#         await state.clear()
#         await message.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

# @router.callback_query(StateFilter(QuestionnaireHair.scalp_type), lambda c: True)
# async def process_hair_scalp_type(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(hair_scalp_type=callback_query.data)
#     await state.set_state(QuestionnaireHair.hair_thickness)
#     await callback_query.message.answer(
#         "23.1) –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–∏–ø –≤–æ–ª–æ—Å: —Ç–æ–ª—â–∏–Ω–∞?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–¢–æ–Ω–∫–∏–µ", callback_data="thin"),
#              InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–µ", callback_data="medium"),
#              InlineKeyboardButton(text="–ì—É—Å—Ç—ã–µ", callback_data="thick")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireHair.hair_thickness), lambda c: True)
# async def process_hair_thickness(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(hair_thickness=callback_query.data)
#     await state.set_state(QuestionnaireHair.hair_length)
#     await callback_query.message.answer(
#         "23.2) –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–∏–ø –≤–æ–ª–æ—Å: –¥–ª–∏–Ω–∞?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–ö–æ—Ä–æ—Ç–∫–∏–µ", callback_data="short"),
#              InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–µ", callback_data="medium"),
#              InlineKeyboardButton(text="–î–ª–∏–Ω–Ω—ã–µ", callback_data="long")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireHair.hair_length), lambda c: True)
# async def process_hair_length(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(hair_length=callback_query.data)
#     await state.set_state(QuestionnaireHair.hair_structure)
#     await callback_query.message.answer(
#         "23.3) –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–∏–ø –≤–æ–ª–æ—Å: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–ü—Ä—è–º—ã–µ", callback_data="straight"),
#              InlineKeyboardButton(text="–í—å—é—â–∏–µ—Å—è", callback_data="wavy"),
#              InlineKeyboardButton(text="–ö—É–¥—Ä—è–≤—ã–µ", callback_data="curly")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireHair.hair_structure), lambda c: True)
# async def process_hair_structure(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(hair_structure=callback_query.data)
#     await state.set_state(QuestionnaireHair.hair_condition)
#     await callback_query.message.answer(
#         "23.4) –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–∏–ø –≤–æ–ª–æ—Å: —Å–æ—Å—Ç–æ—è–Ω–∏–µ?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ", callback_data="damaged"),
#              InlineKeyboardButton(text="–õ–æ–º–∫–∏–µ", callback_data="brittle")],
#             [InlineKeyboardButton(text="–°–µ–∫—É—â–∏–µ—Å—è –∫–æ–Ω—á–∏–∫–∏", callback_data="split_ends"),
#              InlineKeyboardButton(text="–ó–¥–æ—Ä–æ–≤—ã–µ", callback_data="healthy")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireHair.hair_condition), lambda c: True)
# async def process_hair_condition(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(hair_condition=callback_query.data)
#     await state.set_state(QuestionnaireHair.hair_goals)
#     await callback_query.message.answer(
#         "24) –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —É—Ö–æ–¥–∞ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω—ã? –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤\n"
#         "1 - –£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã –∏ –≤–æ–ª–æ—Å\n"
#         "2 - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–ª–æ—Å\n"
#         "3 - –ë–æ—Ä—å–±–∞ —Å –ø–µ—Ä—Ö–æ—Ç—å—é\n"
#         "4 - –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤–æ–ª–æ—Å\n"
#         "5 - –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—ã–ø–∞–¥–µ–Ω–∏—è –≤–æ–ª–æ—Å\n"
#         "6 - –°—Ç–∏–º—É–ª—è—Ü–∏—è —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å\n"
#         "7 - –ó–∞—â–∏—Ç–∞ –æ–∫—Ä–∞—à–µ–Ω–Ω—ã—Ö –≤–æ–ª–æ—Å\n"
#         "8 - –¢–µ—Ä–º–æ–∑–∞—â–∏—Ç–∞",
#         reply_markup=None
#     )

# @router.message(StateFilter(QuestionnaireHair.hair_goals))
# async def process_hair_goals(message: types.Message, state: FSMContext):
#     goals = [int(x) for x in message.text.replace(",", " ").split()]
#     goal_descriptions = {
#         1 : "–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã –∏ –≤–æ–ª–æ—Å",
#         2 : "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–ª–æ—Å",
#         3 : "–ë–æ—Ä—å–±–∞ —Å –ø–µ—Ä—Ö–æ—Ç—å—é",
#         4 : "–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤–æ–ª–æ—Å",
#         5 : "–£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—ã–ø–∞–¥–µ–Ω–∏—è –≤–æ–ª–æ—Å",
#         6 : "–°—Ç–∏–º—É–ª—è—Ü–∏—è —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å",
#         7 : "–ó–∞—â–∏—Ç–∞ –æ–∫—Ä–∞—à–µ–Ω–Ω—ã—Ö –≤–æ–ª–æ—Å",
#         8 : "–¢–µ—Ä–º–æ–∑–∞—â–∏—Ç–∞"
#     }
#     goal_texts = [goal_descriptions[goal] for goal in goals if goal in goal_descriptions]
#     await state.update_data(hair_goals=goal_texts)
#     await state.set_state(QuestionnaireHair.washing_frequency)
#     await message.answer(
#         "25) –ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –º–æ–µ—à—å –≥–æ–ª–æ–≤—É?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="daily"),
#              InlineKeyboardButton(text="–ö–∞–∂–¥—ã–µ 2 –¥–Ω—è", callback_data="every_2_days")],
#             [InlineKeyboardButton(text="2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", callback_data="twice_weekly"),
#              InlineKeyboardButton(text="1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data="once_weekly")]
#         ])
#     )

# @router.callback_query(StateFilter(QuestionnaireHair.washing_frequency), lambda c: True)
# async def process_washing_frequency(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(washing_frequency=callback_query.data)
#     await state.set_state(QuestionnaireHair.current_products)
#     await callback_query.message.answer(
#         "26) –ö–∞–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–µ–π—á–∞—Å? –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–®–∞–º–ø—É–Ω—å", callback_data="shampoo"),
#              InlineKeyboardButton(text="–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä", callback_data="conditioner")],
#             [InlineKeyboardButton(text="–ú–∞—Å–∫–∞", callback_data="mask"),
#              InlineKeyboardButton(text="–ù–µ—Å–º—ã–≤–∞–µ–º—ã–π —É—Ö–æ–¥", callback_data="leave_in_care")],
#             [InlineKeyboardButton(text="–°–∫—Ä–∞–± –∏–ª–∏ –ø–∏–ª–∏–Ω–≥ –¥–ª—è –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã", callback_data="scrub")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireHair.current_products), lambda c: True)
# async def process_current_products(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(current_products=callback_query.data)
#     await state.set_state(QuestionnaireHair.product_texture)
#     await callback_query.message.answer(
#         "27) –ö–∞–∫—É—é —Ç–µ–∫—Å—Ç—É—Ä—É —Å—Ä–µ–¥—Å—Ç–≤–∞ —Ç—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–õ–µ–≥–∫—É—é", callback_data="light"),
#              InlineKeyboardButton(text="–ü–ª–æ—Ç–Ω—É—é", callback_data="dense")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireHair.product_texture), lambda c: True)
# async def process_product_texture(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(product_texture=callback_query.data)
#     await state.set_state(QuestionnaireHair.sensitivity)
#     pre_message_map = {
#         "light": "–ü–æ–Ω–∏–º–∞—é, —Ç–æ–∂–µ –Ω–µ –ª—é–±–ª—é –∂–∏—Ä–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –æ—â—É—â–µ–Ω–∏–µ –ª–∏–ø–∫–æ—Å—Ç–∏ üôè",
#         "dense": "–°–æ–≥–ª–∞—Å–Ω–∞, –ø–æ –ø–ª–æ—Ç–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±—É–¥—Ç–æ –±–æ–ª—å—à–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–æ \"—Ä–∞–±–æ—Ç–∞–µ—Ç\" üòÇ"
#     }
#     await callback_query.message.answer(pre_message_map[callback_query.data])
#     await callback_query.message.answer(
#         "28) –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∞–ª–ª–µ—Ä–≥–∏—è –∏–ª–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –∫–∞–∫–∏–º-–ª–∏–±–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –Ω–∞ –∫–æ–∂–µ –≥–æ–ª–æ–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—É–ª—å—Ñ–∞—Ç–∞–º, —ç—Ñ–∏—Ä–Ω—ã–º –º–∞—Å–ª–∞–º, –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä–∞–º)?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–î–∞", callback_data="yes"),
#              InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireHair.sensitivity), lambda c: True)
# async def process_sensitivity(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(sensitivity=callback_query.data)
#     await state.set_state(QuestionnaireHair.styling_tools)
#     await callback_query.message.answer(
#         "29) –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –ª–∏ —Ç—ã —Ç–µ—Ä–º–æ—É–∫–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã (—Ñ–µ–Ω, —É—Ç—é–∂–æ–∫)?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–î–∞, —á–∞—Å—Ç–æ", callback_data="often"),
#              InlineKeyboardButton(text="–ò–Ω–æ–≥–¥–∞", callback_data="sometimes"),
#              InlineKeyboardButton(text="–ù–µ—Ç", callback_data="never")]
#         ])
#     )
#     await callback_query.answer()

# @router.callback_query(StateFilter(QuestionnaireHair.styling_tools), lambda c: True)
# async def process_styling_tools(callback_query: CallbackQuery, state: FSMContext):
#     await state.update_data(styling_tools=callback_query.data)
#     user_data = await state.get_data()
#     await callback_query.message.answer(
#         "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
#         f"–¢–∏–ø –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã: {user_data['hair_scalp_type']}\n"
#         f"–¢–æ–ª—â–∏–Ω–∞ –≤–æ–ª–æ—Å: {user_data['hair_thickness']}\n"
#         f"–î–ª–∏–Ω–∞ –≤–æ–ª–æ—Å: {user_data['hair_length']}\n"
#         f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ª–æ—Å: {user_data['hair_structure']}\n"
#         f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ª–æ—Å: {user_data['hair_condition']}\n"
#         f"–¶–µ–ª–∏ —É—Ö–æ–¥–∞: {', '.join(map(str, user_data['hair_goals']))}\n"
#         f"–ß–∞—Å—Ç–æ—Ç–∞ –º—ã—Ç—å—è –≥–æ–ª–æ–≤—ã: {user_data['washing_frequency']}\n"
#         f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {user_data['current_products']}\n"
#         f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞: {user_data['product_texture']}\n"
#         f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {user_data['sensitivity']}\n"
#         f"–¢–µ—Ä–º–æ—É–∫–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã: {user_data['styling_tools']}"
#     )

#     us_id = callback_query.from_user.id

#     user_hair_data = {
#                 "hair_scalp_type": f"–¢–∏–ø –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã: {user_data['hair_scalp_type']}",
#                 "hair_thickness": f"–¢–æ–ª—â–∏–Ω–∞ –≤–æ–ª–æ—Å: {user_data['hair_thickness']}",
#                 "hair_length": f"–î–ª–∏–Ω–∞ –≤–æ–ª–æ—Å: {user_data['hair_length']}",
#                 "hair_structure": f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ª–æ—Å: {user_data['hair_structure']}",
#                 "hair_condition": f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ª–æ—Å: {user_data['hair_condition']}",
#                 "hair_goals": f"–¶–µ–ª–∏ —É—Ö–æ–¥–∞: {', '.join(map(str, user_data['hair_goals']))}",
#                 "washing_frequency": f"–ß–∞—Å—Ç–æ—Ç–∞ –º—ã—Ç—å—è –≥–æ–ª–æ–≤—ã: {user_data['washing_frequency']}",
#                 "current_products": f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {user_data['current_products']}",
#                 "product_texture": f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞: {user_data['product_texture']}",
#                 "sensitivity": f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {user_data['sensitivity']}",
#                 "styling_tools": f"–¢–µ—Ä–º–æ—É–∫–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã: {user_data['styling_tools']}",
#             }
#     response = await send_user_data(us_id, user_hair_data, "SetUserHairData", "user_hair_data")
#     await callback_query.message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ: {response}")
#     await bot.send_message(us_id, "–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω, /start –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é")
#     await state.clear()


# @router.message(StateFilter(UserState.yapp))
# async def yapp_handler(message: Message, state: FSMContext) -> None:
#     user_data = await state.get_data()
#     us_id = str(message.from_user.id)
#     chat_id = message.chat.id
#     sticker_message = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
#     if message.text:
#         response_1 = await generate_response(message.text, us_id, YAPP_ASS)
#         response = remove_tags(response_1)
#         await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
#         await message.answer(response)
#     elif message.voice:
#         trainscription = await audio_file(message.voice.file_id)
#         await message.answer(trainscription)
#         response_1 = await generate_response(trainscription, us_id, YAPP_ASS)
#         response = remove_tags(response_1)
#         await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
#         await message.answer(response)
#     elif message.photo:
#         file = await bot.get_file(message.photo[-1].file_id)
#         file_path = file.file_path
#         file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"
#         url_response_1 = await process_url(file_url, us_id, YAPP_ASS)
#         url_response = remove_tags(url_response_1)
#         await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
#         await message.answer(url_response)

# @router.message(StateFilter(UserState.recognition))
# async def recognition_handler(message: Message, state: FSMContext) -> None:
#     user_data = await state.get_data()
#     product_type = user_data.get("product_type")
#     us_id = str(message.from_user.id)
#     chat_id = message.chat.id
#     if message.text:

#         sticker_message = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
#         med_name = await generate_response(message.text, us_id, ASSISTANT_ID)
#         await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)


#         await message.answer(f"–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫: {med_name}, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É –≤ –±–∞–∑–µ –∏ –¥–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É")

#         sticker_message1 = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
#         response1 = await no_thread_ass(med_name, ASSISTANT_ID_2)
#         # response = await remove_json_block(response1)
#         await bot.delete_message(chat_id=chat_id, message_id=sticker_message1.message_id)

#         extracted_list = await extract_list_from_input(response1)
#         print(extracted_list)
#         if extracted_list:
#             buttons = [[InlineKeyboardButton(text="–í—Å–µ –Ω–µ —Ç–æ, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"analysis")],]
#             product_messages = []
#             for product in extracted_list:
#                 product_messages.append(f"id: {product.get('Identifier')}, name: {product.get('FullName')}")
#                 buttons.append(
#                     [
#                 InlineKeyboardButton(
#                     text=product.get('FullName'),
#                     callback_data=f"item_{product_type}_{product.get('Identifier')}"
#                 )
#             ]
#         )
#             combined_message = "\n".join(product_messages)
#             keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
#             await message.answer(f"–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ \n{combined_message}", reply_markup=keyboard)
#         else:
#             keyboard = InlineKeyboardMarkup(
#                 inline_keyboard=[
#                     [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="analysis")]
#                 ]
#             )
#             await message.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç!  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!  üåü", reply_markup=keyboard)
#     elif message.voice:

#         transcribed_text = await audio_file(message.voice.file_id)
#         sticker_message = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))

#         med_name = await generate_response(transcribed_text, us_id, ASSISTANT_ID)
#         await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
#         await message.answer(f"–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫: {med_name}, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É –≤ –±–∞–∑–µ –∏ –¥–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É")

#         sticker_message1 = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
#         response1 = await no_thread_ass(med_name, ASSISTANT_ID_2)
#         # response = await remove_json_block(response1)
#         await bot.delete_message(chat_id=chat_id, message_id=sticker_message1.message_id)

#         # await message.answer(f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –≤ –±–∞–∑–µ: {response}")
#         extracted_list = await extract_list_from_input(response1)
#         print(extracted_list)
#         if extracted_list:
#             buttons = []
#             product_messages = []
#             for product in extracted_list:
#                 product_messages.append(f"id: {product.get('Identifier')}, name: {product.get('FullName')}")
#                 buttons.append(
#                     [
#                 InlineKeyboardButton(
#                     text=product.get('FullName'),
#                     callback_data=f"item_{product_type}_{product.get('Identifier')}"
#                 )
#             ]
#         )
#             combined_message = "\n".join(product_messages)
#             keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
#             await message.answer(f"–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ \n{combined_message}", reply_markup=keyboard)
#         else:
#             keyboard = InlineKeyboardMarkup(
#                 inline_keyboard=[
#                     [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="analysis")]
#                 ]
#             )
#             await message.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç!  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!  üåü", reply_markup=keyboard)
#     elif message.photo:

#         file = await bot.get_file(message.photo[-1].file_id)
#         file_path = file.file_path
#         file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"

#         sticker_message = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
#         med_name = await process_url(file_url, us_id, ASSISTANT_ID)
#         await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
#         await message.answer(f"–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫: {med_name}, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É –≤ –±–∞–∑–µ –∏ –¥–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É")

#         sticker_message1 = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
#         response1 = await no_thread_ass(med_name, ASSISTANT_ID_2)
#         # response = await remove_json_block(response1)
#         await bot.delete_message(chat_id=chat_id, message_id=sticker_message1.message_id)

#         # await message.answer(f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –≤ –±–∞–∑–µ: {response}")
#         extracted_list = await extract_list_from_input(response1)
#         print(extracted_list)
#         if extracted_list:
#             buttons = []
#             product_messages = []
#             for product in extracted_list:
#                 product_messages.append(f"id: {product.get('Identifier')}, name: {product.get('FullName')}")
#                 buttons.append(
#                     [
#                 InlineKeyboardButton(
#                     text=product.get('FullName'),
#                     callback_data=f"item_{product_type}_{product.get('Identifier')}"
#                 )
#             ]
#         )
#             combined_message = "\n".join(product_messages)
#             keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
#             await message.answer(f"–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ \n{combined_message}", reply_markup=keyboard)
#         else:
#             keyboard = InlineKeyboardMarkup(
#                 inline_keyboard=[
#                     [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="analysis")]
#                 ]
#             )
#             await message.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç!  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!  üåü", reply_markup=keyboard)
#     else:
#         await message.answer("–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ñ–æ—Ç–æ")

# @router.callback_query(lambda c: c.data == 'analysis')
# async def process_analysis_cb(callback_query: CallbackQuery, state: FSMContext):
#     us_id = callback_query.from_user.id
#     text = "–î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º, –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –±–∞–Ω–æ—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å?"
#     buttons = [
#         [InlineKeyboardButton(text="–î–ª—è –ª–∏—Ü–∞", callback_data="product_type_face")],
#         [InlineKeyboardButton(text="–î–ª—è —Ç–µ–ª–∞ –∏ —Ä—É–∫", callback_data="product_type_body")],
#         [InlineKeyboardButton(text="–î–ª—è –≤–æ–ª–æ—Å –∏ –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã", callback_data="product_type_hair")],
#     ]
#     keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
#     await bot.send_message(us_id, text, reply_markup=keyboard)
#     await callback_query.answer()

# @router.callback_query(lambda c: c.data.startswith('product_type_'))
# async def process_product_type(callback_query: CallbackQuery, state: FSMContext):
#     product_type = callback_query.data.split('_')[2]  # Extracts 'face' or 'body'
#     await state.update_data(product_type=product_type)
#     us_id = callback_query.from_user.id
#     text = "–°–∫–∏–Ω—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ üì∏ –∏–ª–∏ <u>—Å—Å—ã–ª–∫—É</u> –Ω–∞ —Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–æ, –æ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.  –Ø –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—é –∏ –¥–∞–º —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É! \n<i>–ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å Ô∏è –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç–æ–≤–∞—Ç—å Ô∏è –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ. –í–∞—à –≤—ã–±–æ—Ä –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Avocado bot </i> ü•ë"
#     await state.set_state(UserState.recognition)
#     await bot.send_message(us_id, text)
#     await callback_query.answer()


# @router.callback_query(lambda c: c.data == 'questionaire2')
# async def process_questionaire2(callback_query: CallbackQuery, state: FSMContext):
#     current_data = await state.get_data()
#     if not current_data.get("full_sequence", True):
#         await state.update_data(full_sequence=False)
#     us_id = callback_query.from_user.id
#     text = ( 
#         "–•–æ–ª–∏ –ì—É–∞–∫–∞–º–æ–ª–µ! üòä\n–Ø ‚Äî Avocado Bot, –≤–∞—à –∫–∞—Ä–º–∞–Ω–Ω—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫ –≤ –º–∏—Ä–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ—Å–º–µ—Ç–∏–∫–∏. –ê –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
#     )

#     await bot.send_message(us_id, text)
#     await state.set_state(Questionnaire.name)
#     await callback_query.answer()

# @router.callback_query(lambda c: c.data == 'setstate_yapp')
# async def process_setstate_yapp(callback_query: CallbackQuery, state: FSMContext):
#     await state.set_state(UserState.yapp)
#     await callback_query.answer("yapp_state_set")

# @router.callback_query(lambda c: c.data == 'settings')
# async def process_settings(callback_query: CallbackQuery, state: FSMContext):
#     us_id = callback_query.from_user.id
#     buttons = [
#         [InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é Avocado Bot üîñ", callback_data="explain_4")],
#         [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìñ", callback_data="settings_questionaire")],
#         [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞", callback_data="settings_sub")],
#     ]
#     keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
#     text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
#     await callback_query.message.answer(text, reply_markup=keyboard)

# @router.callback_query(lambda c: c.data == 'explain_4')
# async def process_re_sub(callback_query: CallbackQuery, state: FSMContext):
#     text = "–î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞–∂—É, —á—Ç–æ —è —É–º–µ—é üôå"
#     await callback_query.message.answer(text)
#     await callback_query.message.answer("–ë—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞")

# @router.callback_query(lambda c: c.data == 'settings_sub')
# async def process_sub_sett(callback_query: CallbackQuery, state: FSMContext):
#     buttons = [
#         [InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="re_sub")],
#         [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="un_sub")],
#     ]
#     keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
#     text = "–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: X   \n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –î–ê–¢–ê, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å \n\n<i>–û–∂–∏–¥–∞–µ—Ç –º–µ—Ç–æ–¥–∞ –¥–ª—è –∏–Ω—Ñ—ã </i>"
#     await callback_query.message.answer(text, reply_markup=keyboard)

# @router.callback_query(lambda c: c.data == 're_sub')
# async def process_re_sub(callback_query: CallbackQuery, state: FSMContext):
#     text = "–ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞—Ç—å –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥ / —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –≤ –¢–ì"
#     await callback_query.message.answer(text)

# @router.callback_query(lambda c: c.data == 'un_sub')
# async def process_un_sub(callback_query: CallbackQuery, state: FSMContext):
#     buttons = [
#         [InlineKeyboardButton(text="–î–∞", callback_data="un_sub_yes")],
#         [InlineKeyboardButton(text="–ù–µ—Ç, —è –æ—Å—Ç–∞—é—Å—å", callback_data="un_sub_no")],
#     ]
#     keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
#     text = "–í—ã —É–≤–µ—Ä–µ–Ω—ã? Avocado Bot –≤—Å–µ–≥–¥–∞ –≤–∞—Å –∂–¥—ë—Ç üíö"
#     await callback_query.message.answer(text, reply_markup=keyboard)

# @router.callback_query(lambda c: c.data == 'settings_questionaire')
# async def process_re_quest(callback_query: CallbackQuery, state: FSMContext):
#     us_id = callback_query.from_user.id
#     buttons = [
#         [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ ü™¥", callback_data="all_questionnaires")],
#         [InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è üå±", callback_data="questionnaires_pick")],
#     ]
#     keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
#     text = "–•–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞?"
#     await callback_query.message.answer(text, reply_markup=keyboard)

# @router.callback_query(lambda c: c.data == 'un_sub_yes')
# async def process_un_sub_yes(callback_query: CallbackQuery, state: FSMContext):
#     await callback_query.message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ üíö")

# @router.callback_query(lambda c: c.data == 'un_sub_no')
# async def process_un_sub_no(callback_query: CallbackQuery, state: FSMContext):
#     await callback_query.message.answer("–êvocado –æ—á–µ–Ω—å —Ä–∞–¥–æ! ü•∞")

# @router.callback_query(lambda c: c.data == 'questionnaires_pick')
# async def process_re_quest_pick(callback_query: CallbackQuery, state: FSMContext):
#     us_id = callback_query.from_user.id
#     us_data = await get_user_data(us_id)
#     await callback_query.message.answer(f"{us_data}")
#     buttons = [
#         [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–û–±—â–µ–µ", callback_data="questionaire2")],
#         [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–õ–∏—Ü–æ", callback_data="questionnaire_face")],
#         [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–¢–µ–ª–æ", callback_data="questionnaire_body")],
#         [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–í–æ–ª–æ—Å—ã", callback_data="questionnaire_hair")],
#     ]
#     keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
#     text = "–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–π —á–∞—Å—Ç–∏ –∞–Ω–∫–µ—Ç—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª ‚Äî –∏ –≤—É–∞–ª—è, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è!"
#     await callback_query.message.answer(text, reply_markup=keyboard)

# @router.callback_query(lambda c: c.data == 'questionnaire_face')
# async def process_questionnaire_face(callback_query: CallbackQuery, state: FSMContext):
#     await state.set_state(UserState.info_coll)
#     current_data = await state.get_data()
#     user_id = callback_query.from_user.id
#     await state.set_state(QuestionnaireFace.skin_type)
#     if not current_data.get("full_sequence", True):
#         await state.update_data(full_sequence=False)
#     print(f"user: {user_id}, full_seq: {current_data.get("full_sequence")}")
#     await callback_query.message.answer(
#         "<b> –ß–∞—Å—Ç—å 2/4 üü¢üü¢‚ö™Ô∏è‚ö™Ô∏è\n"
#         "4 –≤–æ–ø—Ä–æ—Å–∞ –æ —Ç–≤–æ—ë–º —á—É–¥–µ—Å–Ω–æ–º –ª–∏—Ü–µ </b>\n"
#         "–°–ø–∞—Å–∏–±–æ –∑–∞ —á–µ—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –ø–µ—Ä–µ–π–¥–µ–º –∫ ‚Äú–∑–Ω–∞–∫–æ–º—Å—Ç–≤—É‚Äù —Å —Ç–≤–æ–µ–π –∫–æ–∂–µ–π üôå\n\n"
#         "12) –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–∏–ø –∫–æ–∂–∏ –Ω–∞ –ª–∏—Ü–µ?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–ù–æ—Ä–º–∞–ª—å–Ω–∞—è", callback_data="normal"),
#              InlineKeyboardButton(text="–°—É—Ö–∞—è", callback_data="dry")],
#             [InlineKeyboardButton(text="–ñ–∏—Ä–Ω–∞—è", callback_data="oily"),
#              InlineKeyboardButton(text="–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", callback_data="combination")]
#         ])
#     )
#     await callback_query.answer()



# async def start_body_questionnaire(user_id: int, state: FSMContext):
#     current_data = await state.get_data()
#     full_sequence = current_data.get("full_sequence", False)
#     print(f"user: {user_id}, full_seq: {full_sequence}")
#     await state.set_state(QuestionnaireBody.body_skin_type)
#     if not current_data.get("full_sequence", True):
#         await state.update_data(full_sequence=False)
#     print(f"user: {user_id}, full_seq: {current_data.get("full_sequence")}")
#     await bot.send_message(
#         user_id,
#         "<b> –ß–∞—Å—Ç—å 3/4 üü¢üü¢üü¢‚ö™Ô∏è\n"
#         "6 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ç–≤–æ–µ–º —Ç–µ–ª–µ </b>\n"
#         "–° –ª–∏—Ü–æ–º –∑–∞–∫–æ–Ω—á–∏–ª–∏, —ç—Ç–æ –±—ã–ª–∞ —Å–∞–º–∞—è —Å–ª–æ–∂–Ω–∞—è —á–∞—Å—Ç—å, —Ç–µ–ø–µ—Ä—å –∫ —Å–∞–º–æ–π ‚Äú–æ—Å–Ω–æ–≤–Ω–æ–π‚Äù —á–∞—Å—Ç–∏ —Ç–≤–æ–µ–≥–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ —Ç–µ–ª–∞!\n\n"
#         "16) –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–∏–ø –∫–æ–∂–∏ —Ç–µ–ª–∞?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–ù–æ—Ä–º–∞–ª—å–Ω–∞—è", callback_data="normal"),
#              InlineKeyboardButton(text="–°—É—Ö–∞—è", callback_data="dry")],
#             [InlineKeyboardButton(text="–ñ–∏—Ä–Ω–∞—è", callback_data="oily"),
#              InlineKeyboardButton(text="–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", callback_data="combination")]
#         ])
#     )

# @router.callback_query(lambda c: c.data == 'questionnaire_body')
# async def process_questionnaire_body(callback_query: CallbackQuery, state: FSMContext):
#     await state.set_state(UserState.info_coll)
#     await state.update_data(full_sequence=False)
#     await start_body_questionnaire(callback_query.from_user.id, state)
#     await callback_query.answer()


# async def start_hair_questionnaire(user_id: int, state: FSMContext):
#     current_data = await state.get_data()
#     await state.set_state(QuestionnaireHair.scalp_type)
#     if not current_data.get("full_sequence", False):
#         await state.update_data(full_sequence=False)
#     print(f"user: {user_id}, full_seq: {current_data.get("full_sequence")}")
#     await bot.send_message(
#         user_id,
#         "<b>–ß–∞—Å—Ç—å 4/4 üü¢üü¢üü¢üü¢\n"
#         "8 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–æ–ª–æ—Å–∞—Ö –∏ –∫–æ–∂–µ –≥–æ–ª–æ–≤—ã </b> üíÜ‚Äç‚ôÄÔ∏è\n"
#         "–ù—É, –∏ –Ω–µ–º–Ω–æ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –ø—Ä–æ ‚Äú—Å–ø—É—Å—Ç–∏ —Å–≤–æ–∏ –∫–æ—Å—ã, –†–∞–ø—É–Ω—Ü–µ–ª—å‚Äù —Ç–≤–æ–∏ –≤–æ–ª–æ—Å—ã)\n\n"
#         "22) –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–∏–ø –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã?",
#         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–ù–æ—Ä–º–∞–ª—å–Ω–∞—è", callback_data="normal"),
#              InlineKeyboardButton(text="–°—É—Ö–∞—è", callback_data="dry")],
#             [InlineKeyboardButton(text="–ñ–∏—Ä–Ω–∞—è", callback_data="oily"),
#              InlineKeyboardButton(text="–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", callback_data="combination")],
#             [InlineKeyboardButton(text="–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è", callback_data="sensitive")]
#         ])
#     )


# @router.callback_query(lambda c: c.data == 'questionnaire_hair')
# async def process_questionnaire_hair(callback_query: CallbackQuery, state: FSMContext):
#     await state.set_state(UserState.info_coll)
#     current_data = await state.get_data()
#     if not current_data.get("full_sequence", False):
#         await state.update_data(full_sequence=False)
#     await start_hair_questionnaire(callback_query.from_user.id, state)
#     await callback_query.answer()

# @router.callback_query(lambda c: c.data == 'all_questionnaires')
# async def process_all_questionnaires(callback_query: CallbackQuery, state: FSMContext):
#     current_data = await state.get_data()
#     print(f"Updated state in process_all_questionnaires: {current_data}")
#     await state.set_state(UserState.info_coll)
#     await state.update_data(full_sequence=True)
#     await process_questionaire2(callback_query, state)

# @router.callback_query(lambda c: c.data.startswith('item_'))
# async def process_item(callback_query: CallbackQuery, state: FSMContext):
#     parts = callback_query.data.split('_')
#     analysis_type = parts[1]
#     item_id = parts[2]

#     analysis_matrix = {
#         'face': ANALYSIS_G_FACE_ASS,
#         'body': ANALYSIS_G_BODY_ASS,
#         'hair': ANALYSIS_G_HAIR_ASS,
#     }

#     analysis_var = analysis_matrix.get(analysis_type)
#     print(f"analysing using {analysis_var}")

#     if not analysis_var:
#         await callback_query.answer("Invalid analysis type.", show_alert=True)
#         return

#     chat_id = callback_query.message.chat.id
#     us_id = callback_query.from_user.id

#     buttons = [
#         InlineKeyboardButton(text="–î–∞, —Ö–æ—á—É üìä", callback_data=f'personal_{analysis_type}_{item_id}'),
#         InlineKeyboardButton(text="–ù–µ—Ç, –Ω–µ —Ö–æ—á—É", callback_data='analysis')
#     ]
#     keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])


#     sticker_message = await bot.send_sticker(chat_id=callback_query.message.chat.id, sticker=random.choice(STICKERLIST))
#     db_info = await fetch_product_details(item_id)
#     analysis_result1 = await no_thread_ass(str(db_info), analysis_var)
#     analysis_result = remove_tags(analysis_result1)
#     await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)

#     await bot.send_message(us_id, analysis_result)
#     await bot.send_message(us_id, "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –∏–º–µ–Ω–Ω–æ <b>–≤–∞–º</b>?", reply_markup=keyboard)

#     await callback_query.answer()

# @router.callback_query(lambda c: c.data.startswith('personal_'))
# async def personal_cb(callback_query: CallbackQuery, state: FSMContext):
#     parts = callback_query.data.split('_')
#     analysis_type = parts[1]
#     item_id = parts[2]
#     us_id = callback_query.from_user.id
#     chat_id = callback_query.message.chat.id

#     analysis_matrix = {
#         'face': ANALYSIS_P_FACE_ASS,
#         'body': ANALYSIS_P_BODY_ASS,
#         'hair': ANALYSIS_P_HAIR_ASS,
#     }
#     db_matrix = {
#         'face': "face",
#         'body': "body",
#         'hair': "hair",
#     }

#     analysis_var = analysis_matrix.get(analysis_type)
#     db_var = db_matrix.get(analysis_type)
    
#     sticker_message = await bot.send_sticker(chat_id=callback_query.message.chat.id, sticker=random.choice(STICKERLIST))
#     db_info = await fetch_product_details(item_id)
#     # user_info = await get_user_data(us_id)
#     user_info_general = await fetch_user_data(us_id, "general")
#     user_info_type = await fetch_user_data(us_id, db_var)
#     gpt_message = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ: {db_info}, –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info_general}, {user_info_type}"
#     pers_analysis1 = await no_thread_ass(gpt_message, analysis_var)
#     pers_analysis = remove_tags(pers_analysis1)
#     await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)

#     await bot.send_message(us_id, pers_analysis)
#     await callback_query.answer()


@router.message()
async def default_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    # await state.update_data(full_sequence=False)
    buttons = [
        [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    if not current_state:
        if message.sticker:
            sticker_id = message.sticker.file_id
            await message.answer(f"{sticker_id}")
        else: 
            await message.answer("–ë—É–¥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∏", reply_markup=keyboard)
    else:
        await message.answer(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")


async def main() -> None:
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    dp.include_router(router)
    dp.message.middleware(StateMiddleware())
    bot = Bot(token=TOKEN, default=DefaultBotProperties(
        parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
