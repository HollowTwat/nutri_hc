import asyncio
from decimal import Decimal, InvalidOperation
import aiogram
import random
import os
import logging
from aiogram import Bot, Dispatcher, types
import openai
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, html, Router, BaseMiddleware, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, InputMediaPhoto, InputMediaVideo
from openai import AsyncOpenAI, OpenAI
# from stickerlist import STICKERLIST
import shelve
import json

from functions import *
from functions2 import *
from all_states import *

arrow_back = "‚¨ÖÔ∏è"
arrow_menu = "‚èèÔ∏è"  #üÜï

# COU_LESS_IMG_1 = "AgACAgIAAxkBAAIFq2esppgH39WhLjmdYQGn7CnH2VbyAAIe7jEbb-RpSZ-LMYskHd_tAQADAgADeQADNgQ"
# COU_LESS_IMG_2 = "AgACAgIAAxkBAAIFr2espqUpBX8QZwXBahHhcR3-YadwAAIg7jEbb-RpSfx5HS7svr5LAQADAgADeQADNgQ"
# COU_LESS_IMG_3 = "AgACAgIAAxkBAAIFs2esprGR_uTd7csprwsrrmbt7TzLAAKB7jEbLgppSZacNITqSzTvAQADAgADeQADNgQ"
# COU_LESS_IMG_4 = "AgACAgIAAxkBAAIFt2esprvvZMQtjmxdFXf-bqDwZ91vAAIj7jEbb-RpSQKI2EU19u5_AQADAgADeQADNgQ"

# INSTRUCTION_PIC_1 = "AgACAgIAAxkBAAILbme2CITGCDX5fJAajPUfK75t-Y1KAAJ36jEbZ-CwSSx3epwn3oViAQADAgADeQADNgQ"
# INSTRUCTION_PIC_2 = "AgACAgIAAxkBAAILcme2CItMydyR_3LA4W7pq-lhf8K-AAJ46jEbZ-CwSY0JnoeBwVzHAQADAgADeQADNgQ"
# INSTRUCTION_PIC_3 = "AgACAgIAAxkBAAILdme2CKEgDF7gW9bOZ4Boy2KBMz3YAAJ26DEb_SexSTHhMMkzPasDAQADAgADeQADNgQ"
# INSTRUCTION_PIC_4 = "AgACAgIAAxkBAAILeme2CLGp15IiQeLcI0ScfW04bSZBAAJ36DEb_SexSR6DG2rN4CZQAQADAgADeQADNgQ"

COU_LESS_IMG_1 = "AgACAgIAAxkBAAEEcNNn2wUPrncuXYUjpgq7_pZqf9zeuQACGfYxG1ap2UqMR7gybvo8RAEAAwIAA3kAAzYE"
COU_LESS_IMG_2 = "AgACAgIAAxkBAAEEcNdn2wUVaFjcyF4NZSZLUH6iOJRt6gACG_YxG1ap2Ur2tIcjg01AHQEAAwIAA3kAAzYE"
COU_LESS_IMG_3 = "AgACAgIAAxkBAAEEcNxn2wUd0psuPhr8i12tr0Pcv1wMgwACHPYxG1ap2UoaKZ2_a7g_JgEAAwIAA3kAAzYE"
COU_LESS_IMG_4 = "AgACAgIAAxkBAAEEcOBn2wUkTVEpkviYGptoQE3Ks3_ELgACHfYxG1ap2Up-H_26yHkoYwEAAwIAA3kAAzYE"

INSTRUCTION_PIC_1 = "AgACAgIAAxkBAAEEcO9n2wYTMAajtZchwt47yzsSSb6UcgACJfYxG1ap2UoJEPNOODNMQgEAAwIAA3kAAzYE"
INSTRUCTION_PIC_2 = "AgACAgIAAxkBAAEEcPJn2wYa-BaGcMvHLnoW_3YcIy4kMQACJvYxG1ap2UpazFDnOU2EKwEAAwIAA3kAAzYE"
INSTRUCTION_PIC_3 = "AgACAgIAAxkBAAEEcPZn2wYhrQthlJrDB33iUg-ET4P8-AACJ_YxG1ap2UoENchLBpZSeQEAAwIAA3kAAzYE"
INSTRUCTION_PIC_4 = "AgACAgIAAxkBAAEEcQNn2wYncu8T_hpMRXudGOnDXuqX5gACKPYxG1ap2Uo-FMRjuY1nagEAAwIAA3kAAzYE"
################## MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU ##################

async def menu_handler(message, state) -> None:
    await state.update_data(full_sequence=False)
    buttons = [
        [InlineKeyboardButton(text="üìö –ö—É—Ä—Å:", callback_data="menu_course")],
        [InlineKeyboardButton(text="üçΩ –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è:", callback_data="menu_dnevnik")],
        [InlineKeyboardButton(text="üí¨  –ù—É—Ç—Ä–∏:", callback_data="menu_nutri")],
        [InlineKeyboardButton(text="‚öôÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ:", callback_data="menu_settings")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "–ú–µ–Ω—é"
    await message.answer(step0txt, reply_markup=keyboard)

async def menu_back_handler(callback_query, state) -> None:
    await state.update_data(full_sequence=False)
    buttons = [
        [InlineKeyboardButton(text="üìö –ö—É—Ä—Å:", callback_data="menu_course")],
        [InlineKeyboardButton(text="üçΩ –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è:", callback_data="menu_dnevnik")],
        [InlineKeyboardButton(text="üí¨  –ù—É—Ç—Ä–∏:", callback_data="menu_nutri")],
        [InlineKeyboardButton(text="‚öôÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ:", callback_data="menu_settings")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "–ú–µ–Ω—é"
    try:
        await callback_query.message.edit_text(step0txt, reply_markup=keyboard)
    except Exception as e:
        await callback_query.message.answer(step0txt, reply_markup=keyboard)

async def menu_cb_handler(callback_query, state) -> None:
    await state.update_data(full_sequence=False)
    buttons = [
        [InlineKeyboardButton(text="üìö –ö—É—Ä—Å:", callback_data="menu_course")],
        [InlineKeyboardButton(text="üçΩ –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è:", callback_data="menu_dnevnik")],
        [InlineKeyboardButton(text="üí¨  –ù—É—Ç—Ä–∏:", callback_data="menu_nutri")],
        [InlineKeyboardButton(text="‚öôÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ:", callback_data="menu_settings")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "–ú–µ–Ω—é"
    await callback_query.message.edit_text(step0txt, reply_markup=keyboard)

async def menu_no_edit(callback_query, state) -> None:
    await state.update_data(full_sequence=False)
    buttons = [
        [InlineKeyboardButton(text="üìö –ö—É—Ä—Å:", callback_data="menu_course")],
        [InlineKeyboardButton(text="üçΩ –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è:", callback_data="menu_dnevnik")],
        [InlineKeyboardButton(text="üí¨  –ù—É—Ç—Ä–∏:", callback_data="menu_nutri")],
        [InlineKeyboardButton(text="‚öôÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ:", callback_data="menu_settings")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "–ú–µ–Ω—é"
    await callback_query.message.answer(step0txt, reply_markup=keyboard)

async def process_menu_course(message, state, id):
    iserror, last_lesson = await get_last_user_lesson(id)
    if last_lesson == 21:
        current_lesson = 21
    elif last_lesson == 99:
        current_lesson = 1
    else:
        current_lesson = last_lesson+1

    await state.update_data(current_lesson=current_lesson)
    buttons = [
        [InlineKeyboardButton(text=f"üìñ–ù–∞—á–∞—Ç—å –£—Ä–æ–∫ {current_lesson}", callback_data=f"d{current_lesson}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞", callback_data="menu_course_info")],
        [InlineKeyboardButton(text=arrow_menu, callback_data="menu_back")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "üìö –ö—É—Ä—Å:"
    try:
        await message.edit_text(step0txt, reply_markup=keyboard)
    except Exception as e:
        await message.answer(step0txt, reply_markup=keyboard)
    # await callback_query.message.answer(step0txt, reply_markup=keyboard)

async def process_menu_dnevnik(message, state):
    buttons = [
        [InlineKeyboardButton(text="üçΩ –ó–∞–Ω–µ—Å—Ç–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫", callback_data="menu_dnevnik_input")],
        [InlineKeyboardButton(text="üîÑ–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="menu_dnevnik_edit")],
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="menu_dnevnik_analysis")],
        [InlineKeyboardButton(text="üì∏ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="menu_dnevnik_instruction")],
        [InlineKeyboardButton(text=arrow_menu, callback_data="menu_back")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "üçΩ –î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è:"
    try:
        await message.edit_text(step0txt, reply_markup=keyboard)
    except Exception as e:
        await message.answer(step0txt, reply_markup=keyboard)
    # await callback_query.message.answer(step0txt, reply_markup=keyboard)

async def process_menu_nutri(message, state):
    buttons = [
        [InlineKeyboardButton(text="üåø –°–ø—Ä–æ—Å–∏—Ç—å –ù—É—Ç—Ä–∏", callback_data="menu_nutri_yapp")],
        [InlineKeyboardButton(text="üë©‚Äçüç≥ –†–µ—Ü–µ–ø—Ç", callback_data="menu_nutri_reciepie")],
        [InlineKeyboardButton(text="üîç –ê–Ω–∞–ª–∏–∑ —ç—Ç–∏–∫–µ—Ç–∫–∏", callback_data="menu_nutri_etiketka")],
        [InlineKeyboardButton(text=arrow_menu, callback_data="menu_back")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "üí¨  –ù—É—Ç—Ä–∏:"
    try:
        await message.edit_text(step0txt, reply_markup=keyboard)
    except Exception as e:
        await message.answer(step0txt, reply_markup=keyboard)
    # await callback_query.message.answer(step0txt, reply_markup=keyboard)

async def process_menu_settings(message, state):
    buttons = [
        [InlineKeyboardButton(text="üìå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å", callback_data="menu_settings_profile")],
        [InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="menu_settings_help")],
        [InlineKeyboardButton(text="üí∞ –£—Å–ª–æ–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="menu_settings_sub")],
        [InlineKeyboardButton(text=arrow_menu, callback_data="menu_back")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "‚öôÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ:"
    try:
        await message.edit_text(step0txt, reply_markup=keyboard)
    except Exception as e:
        await message.answer(step0txt, reply_markup=keyboard)
    # await callback_query.message.answer(step0txt, reply_markup=keyboard)
################## MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU MENU ##################

################## COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU ##################

async def process_menu_course_lesson(callback_query, state):
    step0txt = "–í—ã–±–∏—Ä–∞–π —É—Ä–æ–∫"
    buttons = [
        [InlineKeyboardButton(text='–£—Ä–æ–∫1', callback_data='d1')],
        [InlineKeyboardButton(text='–£—Ä–æ–∫2', callback_data='d2'), InlineKeyboardButton(text='–£—Ä–æ–∫2_2', callback_data='d2_2')],
        [InlineKeyboardButton(text='–£—Ä–æ–∫2', callback_data='d3'), InlineKeyboardButton(text='–£—Ä–æ–∫3_2', callback_data='d3_2')],
        [InlineKeyboardButton(text='–£—Ä–æ–∫2', callback_data='d4'), InlineKeyboardButton(text='–£—Ä–æ–∫4_2', callback_data='d4_2')],
        [InlineKeyboardButton(text='–£—Ä–æ–∫2', callback_data='d5'), InlineKeyboardButton(text='–£—Ä–æ–∫5_2', callback_data='d5_2')]
    ]
    await callback_query.message.edit_text(step0txt, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

async def process_menu_course_info(callback_query, state):
    iserror, lessons_dict = await get_user_lessons(callback_query.from_user.id)
    await state.update_data(lessons_dict=lessons_dict)
    state_data = await state.get_data()
    current_lesson = state_data["current_lesson"]
    step0txt = "üíö –ù–∞ –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–µ —Ç—ã –∑–∞–º–µ—Ç–∏—à—å –ø–∏—â–µ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –º–µ—à–∞—é—Ç. \nüíú –ù–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–ª—É—á–∏—à—å –±–∞–∑—É –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫. \n‚ù§Ô∏è –ù–∞ —Ç—Ä–µ—Ç—å–µ–π –∑–∞–∫—Ä–µ–ø–∏—à—å –Ω–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –Ω–∞—á–Ω—ë—à—å –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏."
    media_files = [
        InputMediaPhoto(media=COU_LESS_IMG_1, caption=step0txt),
        InputMediaPhoto(media=COU_LESS_IMG_2),
        InputMediaPhoto(media=COU_LESS_IMG_3),
        InputMediaPhoto(media=COU_LESS_IMG_4)
    ]
    lesson_week = int(current_lesson/7)
    step = current_lesson-lesson_week*7
    step1txt = f"–°–µ–π—á–∞—Å —Ç—ã –Ω–∞ {step} —É—Ä–æ–∫–µ —ç—Ç–∞–ø–∞ {lesson_week+1} üß°"
    step2txt = f"{current_lesson-1} —É—Ä–æ–∫–æ–≤ –∏–∑ 21 –¥–Ω—è –ø—Ä–æ–π–¥–µ–Ω–æ üí™  –û—Å—Ç–∞–ª–æ—Å—å {22-current_lesson} —É—Ä–æ–∫–æ–≤"
    buttons = [
        [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏", callback_data=f"menu_course_info_lessons_week_{lesson_week+1}")],
        [InlineKeyboardButton(text=arrow_back, callback_data="menu_course"), 
         InlineKeyboardButton(text=arrow_menu, callback_data="menu_back")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback_query.message.delete()
    await callback_query.message.answer_media_group(media=media_files)
    await callback_query.message.answer(step1txt)
    await callback_query.message.answer(step2txt, reply_markup=keyboard)

async def ensure_lessons_dict(state, user_id):
    state_data = await state.get_data()

    if "lessons_dict" not in state_data:
        iserror, lessons_dict = await get_user_lessons(user_id)
        
        if iserror or lessons_dict is None:
            print("Error fetching lessons.")
            return None
        print("Fetched lessons_dict:", lessons_dict)

        await state.update_data(lessons_dict=lessons_dict)
    else:
        lessons_dict = state_data["lessons_dict"]

    return lessons_dict

async def process_menu_cource_info_lessons(callback_query, state):
    week = int(callback_query.data.split("_")[5])
    lessons_dict = await ensure_lessons_dict(state, callback_query.from_user.id)
    buttons = make_lesson_week_buttons(lessons_dict, week)
    await callback_query.message.edit_text("–ù–µ–¥–µ–ª—è 1", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
################## COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU COURSE_MENU ##################

################## DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU ##################

async def process_menu_dnevnik_input(callback_query, state):
    step0txt = "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ–¥—ã.\n–¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è üé§ –∞—É–¥–∏–æ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<i>–Ø–∏—á–Ω–∏—Ü–∞ –∏–∑ 2 —è–∏—Ü, —á–∞–π –±–µ–∑ —Å–∞—Ö–∞—Ä–∞</i>"
    await callback_query.message.edit_text(step0txt, reply_markup=None)

async def process_menu_dnevnik_edit(callback_query, state):
    if callback_query.data == "menu_dnevnik_edit":
        await state.set_state(UserState.edit)
        id = str(callback_query.from_user.id)
        API_URL = f"https://nutridb-production.up.railway.app/api/TypesCRUD/GetUserWeekMealsStatus?userTgId={id}"
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(API_URL) as response:
                    text_data = await response.text()
                    meal_data = json.loads(text_data)
                    await state.update_data(meal_data=meal_data)
            except aiohttp.ClientError as e:
                await callback_query.message.edit_text(f"Error fetching data: {str(e)}")
                return
    else:
        user_data = await state.get_data()
        meal_data = user_data.get("meal_data", [])

    await callback_query.message.edit_text("–í—ã–±–∏—Ä–∞–π –¥–µ–Ω—å", reply_markup=generate_day_buttons(meal_data))


async def process_menu_dnevnik_analysis(callback_query, state):
    buttons = [
        [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="menu_dnevnik_analysis_rate-day")],
        [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="menu_dnevnik_analysis_rate-week")],
        [InlineKeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é", callback_data="menu_dnevnik_analysis_graph")],
        [InlineKeyboardButton(text=arrow_back, callback_data="menu_dnevnik"), 
         InlineKeyboardButton(text=arrow_menu, callback_data="menu_back")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    iserror, total_kkal = await get_total_kkal(callback_query.from_user.id, "0")
    generated_text = generate_kkal_text(total_kkal)
    await callback_query.message.edit_text(generated_text, reply_markup=keyboard)

async def process_menu_dnevnik_instruction(callback_query, state):
    step0txt = "üìí <b>–ú—ã –±—É–¥–µ–º –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è\n–í—Ä–µ–º—è</b>: –Ω–µ –±–æ–ª—å—à–µ 3 –º–∏–Ω –≤ –¥–µ–Ω—å\n\n<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n\n–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π –≤ —á–∞—Ç —Ñ–æ—Ç–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–≤–æ–µ–π –µ–¥—ã, –∞ —è —Å–∞–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞—é –ö–ë–ñ–£ (–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã) –∏ –≤–Ω–µ—Å—É –∏—Ö –≤ –¥–Ω–µ–≤–Ω–∏–∫.\n\n–¢–µ–±–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å, –≤ –∫–∞–∫–æ–π –∏–∑ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –º–Ω–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–ª—é–¥–æ: –∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏–ª–∏ —É–∂–∏–Ω."
    buttons = [[InlineKeyboardButton(text="–ù–∞–¥–æ –≤–Ω–æ—Å–∏—Ç—å –≤—Å–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏?", callback_data="next")]]
    await callback_query.message.edit_text(step0txt, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

async def process_menu_dnevnik_instruction_2(callback_query, state):
    txt1 = "<b>–í–æ—Ç –ø–∞—Ä–∞ –ø—Ä–∏—á–∏–Ω, –ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–Ω–µ–≤–Ω–∏–∫:</b>\n\n‚úÖ <b>–¢—ã –ø–æ–π–º—ë—à—å, —Å–∫–æ–ª—å–∫–æ –∫–∞–ª–æ—Ä–∏–π –µ—à—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ</b>\n\n–ú—ã —Å–∫–ª–æ–Ω–Ω—ã –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞ –¥–µ–Ω—å –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –¥–æ–∫–∞–∑—ã–≤–∞—é—Ç: –µ—Å–ª–∏ –ø–æ—Ä—Ü–∏—è –±–æ–ª—å—à–∞—è, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–∞ —Ü–µ–ª—ã—Ö 356 –∫–∫–∞–ª –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ!\n\n‚úÖ <b>–ó–∞–º–µ—Ç–∏—à—å, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã ¬´—Å—ä–µ–¥–∞—é—Ç¬ª –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –∑–∞ –¥–µ–Ω—å –∏ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –Ω–∞—Å—ã—â–∞—é—Ç </b>\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, –±—É–ª–æ—á–∫–∞ —Å –∫–æ—Ä–∏—Ü–µ–π –∏ –∫—Ä–µ–º–æ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–º –ø–µ—Ä–µ–∫—É—Å–æ–º –∏ –ø—Ä–∏ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 500 –∫–∫–∞–ª –∂–∏—Ä–∞ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤. –î–ª—è –∫–æ–≥–æ-—Ç–æ —ç—Ç–æ —Ç—Ä–µ—Ç—å –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã. –ü—Ä–∏ —ç—Ç–æ–º –ø–æ—Å–ª–µ –Ω–µ—ë —Ç—ã —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å –µ—Å—Ç—å —á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∞.\n\n‚úÖ <b>–û—Ç—Å–ª–µ–¥–∏—à—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–µ–Ω —Ç–≤–æ–π —Ä–∞—Ü–∏–æ–Ω</b>\n–ù–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–≤—Ä–µ–º—è –∑–∞–º–µ—Ç–∏—à—å, —á—Ç–æ –≤—Å—é –Ω–µ–¥–µ–ª—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≥–∞—Ä–Ω–∏—Ä–∞ –µ—à—å –º–∞–∫–∞—Ä–æ–Ω—ã —á—Ç–æ –ø–æ—Ä–∞ –±—ã –≤–º–µ—Å—Ç–æ –Ω–∏—Ö —Å—ä–µ—Å—Ç—å –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å –∫—Ä—É–ø—É."
    link = "https://pmc.ncbi.nlm.nih.gov/articles/PMC3268700/"
    txt0 = f"–ó–≤—É—á–∏—Ç —Å–ª–æ–∂–Ω–æ, –∫–∞–∫ –∏ —Å –ª—é–±–æ–π –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–æ–π, –Ω–æ —è —Å–æ–≤–µ—Ç—É—é –¥–µ–ª–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–∞–∫!\n–ï—Å—Ç—å –¥–µ—Å—è—Ç–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ <a href=\'{link}\'>–¥–æ–∫–∞–∑—ã–≤–∞—é—Ç</a>, —á—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ —Ç–µ—Ä—è—Ç—å –≤–µ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."
    buttons = [[InlineKeyboardButton(text="–ü—Ä–∏–º–µ—Ä—ã", callback_data="next2")]]
    await callback_query.message.answer(txt0)
    await callback_query.message.answer(txt1, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

async def process_menu_dnevnik_instruction_3(callback_query, state):
    media_files = [
        InputMediaPhoto(media=INSTRUCTION_PIC_1),
        InputMediaPhoto(media=INSTRUCTION_PIC_2),
        InputMediaPhoto(media=INSTRUCTION_PIC_3),
        InputMediaPhoto(media=INSTRUCTION_PIC_4)
    ]
    text = "üí° –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –ø—Ä–∏–º–µ—Ä—ã, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–Ω–æ—Å–∏—Ç—å –ø—Ä–∏–µ–º—ã –ø–∏—â–∏ –≤ ¬´–î–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è¬ª"
    buttons = [[InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_dnevnik")]]
    await callback_query.message.answer_media_group(media=media_files)
    await callback_query.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

################## DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU DNEVNIK_MENU ##################

################## YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU ##################

async def process_menu_nutri_yapp(callback_query, state):
    await state.set_state(UserState.yapp_new)
    step0txt = "–ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Å—Ç–∏ –ø–∏—Ç–∞–Ω–∏—è. –¢–µ–∫—Å—Ç–æ–º –∏–ª–∏ üé§ –∞—É–¥–∏–æ\n–ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ö–∞–∫–∏–µ –ø–µ—Ä–µ–∫—É—Å—ã —Ç—ã –º–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å –∏—Å—Ö–æ–¥—è –∏–∑ –º–æ–µ–π —Ü–µ–ª–∏?</i>"
    await callback_query.message.edit_text(step0txt, reply_markup=None)

async def process_menu_nutri_reciepie(callback_query, state):
    step0txt = "–ö–∞–∫–æ–π –ø—Ä–∏—ë–º –ø–∏—â–∏ –±—É–¥–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å? üçΩ"
    buttons = [
        [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞–∫", callback_data="recimt_0"), InlineKeyboardButton(text="–û–±–µ–¥", callback_data="recimt_2")],
        [InlineKeyboardButton(text="–£–∂–∏–Ω", callback_data="recimt_4"), InlineKeyboardButton(text="–ü–µ—Ä–µ–∫—É—Å", callback_data="recimt_5")]
    ]
    await callback_query.message.edit_text(step0txt, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

async def process_menu_nutri_etiketka(callback_query, state):
    step0txt = "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å —ç—Ç–∏–∫–µ—Ç–∫–æ–π –ª—é–±–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ—Å—Ç–∞–≤ –∑–∞ —Ç–µ–±—è –∏ –Ω–∞–ø–∏—à—É, –µ—Å—Ç—å –ª–∏ –≤ –Ω—ë–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–æ–∏—Ç –æ–ø–∞—Å–∞—Ç—å—Å—è üîç   \n\n–ü–æ–¥—Å–∫–∞–∑–∫–∞üí° \n<i>–î–µ–ª–∞–π —Ñ–æ—Ç–æ —Å–æ—Å—Ç–∞–≤–∞, –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞. \n–§–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–∏–º –±–µ–∑ –±–ª–∏–∫–æ–≤, –Ω–∞ —Ä–æ–≤–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏</i>"
    await callback_query.message.edit_text(step0txt, reply_markup=None)


async def process_menu_nutri_rec_inputType(callback_query, state):
    step0txt = "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ü–µ–ø—Ç? ü•¶"
    buttons = [
        [InlineKeyboardButton(text="–î–∞", callback_data="reciIt_1")],
        [InlineKeyboardButton(text="–ù–µ—Ç, –ø—Ä–∏–¥—É–º–∞–π", callback_data="reciIt_0")]
    ]
    await callback_query.message.edit_text(step0txt, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

async def process_menu_nutri_rec_inputType_2(callback_query, state):
    step0txt = "–£–∂–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–µ—Ü–µ–ø—Ç–µ?"
    buttons = [
        [InlineKeyboardButton(text="–î–∞", callback_data="reciIt_2")],
        [InlineKeyboardButton(text="–ò–º–ø—Ä–æ–≤–∏–∑–∏—Äy—é", callback_data="reciIt_3")]
    ]
    await callback_query.message.edit_text(step0txt, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

async def menu_nutri_rec_input_1(callback_query, state):
    text = "–ù–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç—É–π üé§ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞"
    await callback_query.message.edit_text(text, reply_markup=None)

async def menu_nutri_rec_input_2(callback_query, state):
    text = "–ù–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç—É–π –≥–æ–ª–æ—Å–æ–º üé§ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ä–µ—Ü–µ–ø—Ç–µ. –ú–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å —Ç–µ, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å —É —Ç–µ–±—è –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ."
    await callback_query.message.edit_text(text, reply_markup=None)



################## YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU YAPP_MENU ##################

################## SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU ##################
async def check_user_variable(state: FSMContext, var_name: str):
    user_data = await state.get_data()
    if var_name in user_data and user_data[var_name]:
        return True
    return False

async def parse_state_for_settings(state):
    user_info = await state.get_data()
    gender_mapping = {"male": "–ú—É–∂—Å–∫–æ–π", "female": "–ñ–µ–Ω—Å–∫–∏–π"}
    gender_str = gender_mapping.get(user_info.get("gender"), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    response_str = f"<b>{user_info.get('name')}, –≤–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Ü–µ–ª—å, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –∏–¥—ë—à—å:</b>   \n\n"
    response_str += f"–ü–æ–ª: {gender_str} \n–í–æ–∑—Ä–∞—Å—Ç: {user_info['age']} –ª–µ—Ç \n–í–µ—Å: {user_info['weight']} –∫–≥ \n–†–æ—Å—Ç: {user_info['height']} —Å–º     \n\n"
    response_str += f"–¶–µ–ª—å: {user_info['goal']} \n–¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {user_info['goal_weight']} –∫–≥   \n\n"
    response_str += f"–¢–µ–∫—É—â–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user_info['target_calories']} –∫–∫–∞–ª \n–£—Ä–æ–≤–µ–Ω—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_info['exercise_hours']}—á –ª–µ–≥–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏+{user_info['gym_hours']}—á —Ç—è–∂–µ–ª–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    
    return response_str

async def new_request_for_settings(id, state):
    iserror, input_data = await get_user_info(id)
    data = json.loads(input_data)
    isempty = data.get("isempty", False)
    if isempty == "true":
        return "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞"
    
    goal_mapping = {"+": "–ù–∞–±—Ä–∞—Ç—å", "-": "–ü–æ—Ö—É–¥–µ—Ç—å", "=": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"}
    gender_mapping = {"male": "–ú—É–∂—Å–∫–æ–π", "female": "–ñ–µ–Ω—Å–∫–∏–π"}
    
    goal_str = goal_mapping.get(data.get("user_info_goal"), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    gender_str = gender_mapping.get(data.get("user_info_gender"), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    try:
        weight_change_str = str(data.get("user_info_weight_change", 0)).replace(",", ".")
        weight_change = Decimal(weight_change_str)
        current_weight_str = str(data.get("user_info_weight", 0)).replace(",", ".")
        current_weight = Decimal(current_weight_str)
    except (InvalidOperation, ValueError, TypeError, AttributeError):
        weight_change = Decimal(0)
        current_weight = Decimal(0)
    
    goal_weight = (
        current_weight + abs(weight_change) if data.get("user_info_goal") == "+"
        else current_weight - abs(weight_change) if data.get("user_info_goal") == "-"
        else current_weight
    )
    
    user_info = {
        "name": data.get("user_info_name"),
        "age": data.get("user_info_age"),
        "gender": data.get("user_info_gender"),
        "bmi": data.get("user_info_bmi"),
        "bmr": data.get("bmr"),
        "allergies": data.get("user_info_meals_ban"),
        "weight": str(current_weight),
        "height": data.get("user_info_height"),
        "goal": goal_str,
        "goal_weight": str(goal_weight),
        "target_calories": data.get("target_calories"),
        "gym_hours": data.get("user_info_gym_hrs"),
        "exercise_hours": data.get("user_info_excersise_hrs"),
        "timeslide": data.get("user_info_timeslide")
    }
    
    await state.update_data(**user_info)
    
    response_str = f"<b>{data.get('user_info_name')}, –≤–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Ü–µ–ª—å, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –∏–¥—ë—à—å:</b>   \n\n"
    response_str += f"–ü–æ–ª: {gender_str} \n–í–æ–∑—Ä–∞—Å—Ç: {user_info['age']} –ª–µ—Ç \n–í–µ—Å: {user_info['weight']} –∫–≥ \n–†–æ—Å—Ç: {user_info['height']} —Å–º     \n\n"
    response_str += f"–¶–µ–ª—å: {user_info['goal']} \n–¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {user_info['goal_weight']} –∫–≥   \n\n"
    response_str += f"–¢–µ–∫—É—â–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {user_info['target_calories']} –∫–∫–∞–ª \n–£—Ä–æ–≤–µ–Ω—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: : {user_info['exercise_hours']}—á –ª–µ–≥–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏+{user_info['gym_hours']}—á —Ç—è–∂–µ–ª–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
    return response_str

async def process_menu_settings_profile(callback_query, state):
    await state.set_state(UserState.user_settings)
    is_set = await check_user_variable(state, "goal_weight")
    if is_set:
        step0txt = await parse_state_for_settings(state)
    if not is_set:
        step0txt = await new_request_for_settings(callback_query.from_user.id, state)

    buttons = [
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="menu_settings_profile_name")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ—Ä–º—É –ö–ö–ê–õ", callback_data="menu_settings_profile_kkal")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏", callback_data="menu_settings_profile_timeslide")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–ª–ª–µ—Ä–≥–∏–∏", callback_data="menu_settings_profile_allergies")],
        [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ", callback_data="menu_settings_profile_re-anket")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="menu_settings_profile_notif")],
        [InlineKeyboardButton(text=arrow_menu, callback_data="menu_back"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings")],
        ]
    if step0txt == "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞":
        buttons = [[InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="menu_settings_profile_re-anket")],
                   [InlineKeyboardButton(text=arrow_menu, callback_data="menu_back"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.edit_text(step0txt, reply_markup=keyboard)
    await state.set_state(UserState.change_user_info)

async def process_menu_settings_help(callback_query, state):
    buttons = [
        # [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="menu_settings_help_question")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", url="t.me/nutri_care")],
        [InlineKeyboardButton(text=arrow_back, callback_data="menu_settings"),
         InlineKeyboardButton(text=arrow_menu, callback_data="menu_back")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "–†–∞—Å—Å–∫–∞–∂–∏, —Å —á–µ–º –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã? \n–ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ"
    await callback_query.message.edit_text(step0txt, reply_markup=keyboard)

async def process_menu_settings_sub(callback_query, state):
    subtype, repayment_time = await get_user_sub_info(callback_query.from_user.id)
    buttons = [
        [InlineKeyboardButton(text="–•–æ—á—É –æ–ø–ª–∞—Ç–∏—Ç—å", url="https://nutri-ai.ru/?promo=COMMUNITY&utm_medium=referral&utm_source=telegram&utm_campaign=COMMUNITY")],
        [InlineKeyboardButton(text="–•–æ—á—É –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ", url="https://my.cloudpayments.ru/", callback_data="menu")],   
        [InlineKeyboardButton(text=arrow_back, callback_data="menu_settings"), 
         InlineKeyboardButton(text=arrow_menu, callback_data="menu_back")],
        ]
    if subtype == False:
        bttns = [[InlineKeyboardButton(text="–•–æ—á—É –æ–ø–ª–∞—Ç–∏—Ç—å", url="https://nutri-ai.ru/?promo=COMMUNITY&utm_medium=referral&utm_source=telegram&utm_campaign=COMMUNITY")], [InlineKeyboardButton(text=" üÜò –ü–æ–º–æ—â—å", url="t.me/nutri_care")], [InlineKeyboardButton(text="–£–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ, –≤–≤–µ—Å—Ç–∏ –ø–æ—á—Ç—É", callback_data="retry_mail")]]
        await callback_query.message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–π \n\n –ï—Å–ª–∏ —Ç—ã –Ω–µ –≤–≤–æ–¥–∏–ª –ø–æ—á—Ç—É, —Ç–æ —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É", reply_markup=InlineKeyboardMarkup(inline_keyboard=bttns))
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:   \n\n‚òëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –ù—É—Ç—Ä–∏ {subtype} \n‚òëÔ∏è –î–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {repayment_time}"
    message = "–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:\n\n"
    if subtype == "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞" or subtype == "–¢–∞—Ä–∏—Ñ –ù–∞–≤—Å–µ–≥–¥–∞":
        message += "‚òëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –ù—É—Ç—Ä–∏ –Ω–∞–≤—Å–µ–≥–¥–∞"
    elif subtype == "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –≥–æ–¥":
        message += "‚òëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –ù—É—Ç—Ä–∏ –Ω–∞ 1 –≥–æ–¥"
    elif subtype == "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞" or subtype == "–¢–∞—Ä–∏—Ñ –Ω–∞ 3 –º–µ—Å—è—Ü–∞":
        message += f"‚òëÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å –ù—É—Ç—Ä–∏ –Ω–∞ 3 –º–µ—Å—è—Ü–∞\n"
        message += f"‚òëÔ∏è –î–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {repayment_time}"
    elif subtype == "–¢–∞—Ä–∏—Ñ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø":
        message += "‚òëÔ∏è –¢–∞—Ä–∏—Ñ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"
    else:
        message += "‚òëÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"

    await callback_query.message.edit_text(message, reply_markup=keyboard)

async def change_user_name(callback_query, state, name):
    buttons = [[InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]]
    await callback_query.message.edit_text(f"–¢–≤–æ—ë –∏–º—è —É –º–µ–Ω—è —Å–µ–π—á–∞—Å {name}, –ø–∏—à–∏ —Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–µ–Ω—è—Ç—å", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(UserState.name_change)

async def change_user_kkal(callback_query, state, kkal):
    buttons = [[InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]]
    await callback_query.message.edit_text(f"–¢–µ–∫—É—â–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {kkal} –∫–∫–∞–ª\n–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –∫–∫–∞–ª", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(UserState.kkal_change)

async def change_user_allergies(callback_query, state, allergies):
    buttons = [[InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]]
    await callback_query.message.edit_text(f"–¢–µ–∫—É—â–∏–µ –∞–ª–ª–µ—Ä–≥–∏–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –∫–∞–∫: {allergies}\n–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—é", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(UserState.allergy_change)

async def change_user_timeslide(callback_query, state, timeslide):
    buttons = [[InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]]
    await callback_query.message.edit_text(f"–¢–µ–∫—É—â–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –º–æ—Å–∫–≤—ã: {timeslide}\n–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <i>+2 –∏–ª–∏ 0 –∏–ª–∏ -10</i>", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(UserState.slide_change)

# async def restart_anket(callback_query, state):
#     buttons = [[InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]]
#     await callback_query.message.edit_text(f"indev", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))


async def change_user_notifs(callback_query, state):
    buttons = [
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="user_change_notif_time")],
        [InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="user_notif_toggle")],
        [InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]
    ]
    await callback_query.message.edit_text("–ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(UserState.menu)

async def process_menu_settings_notif_toggle(callback_query, state):
    buttons = [
        [InlineKeyboardButton(text="–í–∫–ª", callback_data="True"), InlineKeyboardButton(text="–í—ã–∫–ª", callback_data="False")],
        [InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]
    ]
    text_mapping = {"True": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã", "False": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã", "user_notif_toggle": "–í—ã–±–∏—Ä–∞–π —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"}
    text = text_mapping.get(callback_query.data)

    if callback_query.data in ["True", "False"]:
        Iserror, respo = await change_ping_activation_status(callback_query.from_user.id, callback_query.data)
        if not Iserror: await callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        await state.set_state(UserState.notif_toggle)
        return
    else:
        await callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        await state.set_state(UserState.notif_toggle)

async def ping_change_start(callback_query, state):
    buttons = [[InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]]
    text = "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ç–µ–±–µ —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç –º–µ–Ω—è —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å?\n\n–ò–¥–µ–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥ –µ–¥–æ–π: —Ç–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å –≤—Å–µ –º–æ–∏ –∑–∞–¥–∞–Ω–∏—è –≤–æ–≤—Ä–µ–º—è.\n\n–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –ù–∞–ø—Ä–∏–º–µ—Ä 10:00"
    await callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(UserState.morning_ping_change)

async def change_morning_ping(message, state):
    data = {
        "userTgId": f"{message.from_user.id}",
        "info": {
            "user_info_morning_ping" : f"{message.text}"
        }
    }
    text = "–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å! –ê –≤–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–µ—á–µ—Ä–Ω–∏–µ –∏—Ç–æ–≥–∏?\n\n–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –ù–∞–ø—Ä–∏–º–µ—Ä, 20:00"  
    iserror, answer = await add_or_update_usr_info(json.dumps(data))
    if not iserror:
        await message.answer(text)
        await state.set_state(UserState.evening_ping_change)

async def change_evening_ping(message, state):
    data = {
        "userTgId": f"{message.from_user.id}",
        "info": {
            "user_info_evening_ping" : f"{message.text}"
        }
    }
    text = "–Ø –æ–±–Ω–æ–≤–∏–ª–∞ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚úÖ"
    buttons = [[InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]]
    iserror, answer = await add_or_update_usr_info(json.dumps(data))
    if not iserror:
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        await state.set_state(UserState.menu)

async def process_change_kkal(message, state):
    await state.update_data(target_calories=message.text)
    data = {
        "userTgId": f"{message.from_user.id}",
        "info": {
            "target_calories" : f"{message.text}"
        }
    }
    iserror, answer = await add_or_update_usr_info(json.dumps(data))
    if not iserror:
        buttons = [[InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]]
        await message.answer("–Ø –æ–±–Ω–æ–≤–∏–ª–∞ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚úÖ", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        await state.set_state(UserState.menu)

async def process_change_allergies(message, state):
    await state.update_data(allergies=message.text)
    data = {
        "userTgId": f"{message.from_user.id}",
        "info": {
            "user_info_meals_ban" : f"{message.text}"
        }
    }
    iserror, answer = await add_or_update_usr_info(json.dumps(data))
    if not iserror:
        buttons = [[InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]]
        await message.answer("–Ø –æ–±–Ω–æ–≤–∏–ª–∞ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚úÖ", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        await state.set_state(UserState.menu)

async def process_change_slide(message, state):
    await state.update_data(timeslide=message.text)
    data = {
        "userTgId": f"{message.from_user.id}",
        "info": {
            "user_info_timeslide" : f"{message.text}"
        }
    }
    iserror, answer = await add_or_update_usr_info(json.dumps(data))
    if not iserror:
        buttons = [[InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]]
        await message.answer("–Ø –æ–±–Ω–æ–≤–∏–ª–∞ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚úÖ", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        await state.set_state(UserState.menu)

async def process_change_name(message, state):
    await state.update_data(name=message.text)
    data = {
        "userTgId": f"{message.from_user.id}",
        "info": {
            "user_info_name" : f"{message.text}"
        }
    }
    iserror, answer = await add_or_update_usr_info(json.dumps(data))
    if not iserror:
        buttons = [[InlineKeyboardButton(text=arrow_menu, callback_data="menu"), InlineKeyboardButton(text=arrow_back, callback_data="menu_settings_profile")]]
        await message.answer("–Ø –æ–±–Ω–æ–≤–∏–ª–∞ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ ‚úÖ", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
        await state.set_state(UserState.menu)

################## SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU SETTINGS_MENU ##################

async def perehvat(message, state):
    await state.update_data(perehvat_mssg = message)
    buttons = [
        [InlineKeyboardButton(text="–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å", callback_data="perehvat_dnevnik")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="perehvat_yapp")]
    ]
    await message.answer("–¢—ã —Ö–æ—á–µ—à—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –∫–∞–∫ –≤–æ–ø—Ä–æ—Å?", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
