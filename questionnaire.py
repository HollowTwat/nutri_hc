import asyncio
import aiogram
import random
import os
import logging
from aiogram import Bot, Dispatcher, types
import openai
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, html, Router, BaseMiddleware, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, InputMediaPhoto, InputMediaVideo
from openai import AsyncOpenAI, OpenAI

import shelve
import json

from functions import *
from functions2 import *


class Questionnaire(StatesGroup):
    prefirst = State()
    first = State()
    mail = State()
    name = State()
    gender = State()
    f_preg = State()
    f_breastfeed = State()
    height = State()
    weight = State()
    water = State()
    booze = State()
    meals = State()
    meals_extra = State()
    allergies = State()
    part3 = State()
    jogging = State()
    lifting = State()
    stress = State()
    sleep  = State()
    goal = State()
    w_loss = State()
    w_loss_amount = State()
    city = State()
    morning_ping = State()
    evening_ping = State()
    community_invite = State()

async def process_prefirst(message, state):
    text = f"{message.from_user.first_name},\n\n–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ —Ç–µ–ø–µ—Ä—å —É –º–µ–Ω—è –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø—Ä–∏—è—Ç–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∫–∞–∫ —Ç—ã!\n\n–°–¥–µ–ª–∞—é –≤—Å—ë, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥(–ª–∞) –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –ø—Ä–∏–π—Ç–∏ –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º!\n\n–ù–æ —Å–Ω–∞—á–∞–ª–∞ —ç—Ç–∏ —Ü–µ–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å. –î–ª—è —ç—Ç–æ–≥–æ —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n–û—Ç–≤–µ—Ç—ã –∑–∞–π–º—É—Ç –Ω–µ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç –∏ –ø–æ–º–æ–≥—É—Ç –º–Ω–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –ø–æ–¥ —Ç–≤–æ–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—Ä–æ—Å—ã.\n\n–†–∞—Å—Å–∫–∞–∂–µ—à—å –º–Ω–µ –æ —Å–µ–±–µ?"
    buttons = [
        [InlineKeyboardButton(text="–ö–æ–Ω–µ—á–Ω–æ!", callback_data="next")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text, reply_markup=keyboard)

async def process_first(message, state):
    text = f"–ö–∞–∫–∞—è —É —Ç–µ–±—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞?\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏ —Ç—É –∂–µ –ø–æ—á—Ç—É, —á—Ç–æ –∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ"
    await message.answer(text, reply_markup=None)

async def process_mail(message, state):
    answer = await check_mail(message.text)
    if answer == True:
        text = "<b>–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?</b>"
        await message.answer(text)
    elif answer == False:
        await state.clear()
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏–µ, —è –Ω–µ –Ω–∞—à–ª–∞ —Ç–≤–æ—é –ø–æ—á—Ç—É. –ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É  XXX"
        buttons = [
        [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="retry_mail")],
        [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", url="t.me/nutri_care")],
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer(text, reply_markup=keyboard)
    

async def process_name(message, state):
    link = ""
    text1 = f"<b>–ß–∞—Å—Ç—å 1/3\n4 –≤–æ–ø—Ä–æ—Å–∞ –æ —Ç–µ–±–µ</b>\n{message.text}, –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è —è –±—É–¥—É –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ö–ë–ñ–£: —Ç–≤–æ—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤.\n\n–ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—ë, <a href=\'{link}\'>–º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å</a>—Ç–≤–æ–π –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å –∏ —Ä–æ—Å—Ç: –µ—Å–ª–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ 155 —Å–º –≤–µ—Å –≤ 50 –∫–≥ ‚Äî –Ω–æ—Ä–º–∞, —Ç–æ –¥–ª—è —Ä–æ—Å—Ç–∞ 180 —Å–º —ç—Ç–æ —É–∂–µ –æ—á–µ–Ω—å –º–∞–ª–æ."
    text = "üü¢‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è \n–¢–≤–æ–π –ø–æ–ª"
    buttons = [
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", url="female")],
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", url="male")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text1)
    await message.answer(text, reply_markup=keyboard)

async def process_gender(message, state):
    text = "–¢–æ–≥–¥–∞ –µ—â–µ –ø–∞—Ä–∞ –≤–∞–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –ª–∏ –≤–∞–º –∞–ª–∫–æ–≥–æ–ª—å).\n\n–¢—ã –±–µ—Ä–µ–º–µ–Ω–Ω–∞?"
    buttons = [
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", url="female")],
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", url="male")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.edit_text(text, reply_markup=keyboard)

async def process_f_preg(message, state):
    text = "–ö–æ—Ä–º–∏—à—å –≥—Ä—É–¥—å—é?"
    buttons = [
        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", url="female")],
        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", url="male")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.edit_text(text, reply_markup=keyboard)

async def process_f_breastfeed(message, state):
    text = "üü¢üü¢‚ö™Ô∏è‚ö™Ô∏è \n–¢–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö. –£–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. \n<i>–ù–∞–ø—Ä–∏–º–µ—Ä, 170.</i>"
    await message.edit_text(text, reply_markup=None)

async def process_height(message, state):
    text1 = "–ó–∞–ø–∏—Å–∞–ª–∞!"
    text = "üü¢üü¢üü¢‚ö™Ô∏è \n–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö. –£–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.  \n<i>–ù–∞–ø—Ä–∏–º–µ—Ä, 80</i>"
    await message.answer(text1)
    await message.answer(text)

async def process_weight(message, state):
    text1 = "–ó–∞–ø–∏—Å–∞–ª–∞! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –ø–æ—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢) –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é! \n–ù–æ —Å–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω—é –µ—â—ë –æ–¥–∏–Ω –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç!"
    text = "üü¢üü¢üü¢üü¢ \n–†–∞–∑ —É–∂ —É –Ω–∞—Å —Å —Ç–æ–±–æ–π —á–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä, —Å–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç =) –û–±–µ—â–∞—é, —ç—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ–∂–¥—É –Ω–∞–º–∏! –ú–Ω–µ –Ω—É–∂–Ω–æ —ç—Ç–æ –∑–Ω–∞—Ç—å –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ç–≤–æ–µ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞.  \n–ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.\n<i>–ù–∞–ø—Ä–∏–º–µ—Ä, 35</i>"
    await message.answer(text1)
    await message.answer(text)

async def process_age(message, state):
    link = ""
    text1 = "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
    text2 = "üü†‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è \n–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –ø—å—ë—à—å –≤ –¥–µ–Ω—å? \n–í–æ–ø—Ä–æ—Å –ø—Ä–æ —á–∏—Å—Ç—É—é –≤–æ–¥—É, —á–∞–π –∏ –∫–æ—Ñ–µ –Ω–µ –≤ —Å—á—ë—Ç!"
    text = f"<b>–ß–∞—Å—Ç—å 2/3\n5 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø–∏—Ç–∞–Ω–∏–∏</b>\n\n–ü—Ä–∏–≤—ã—á–∫–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å. –†–µ–∑–∫–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—É—é –∂–∏–∑–Ω—å ¬´—Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞¬ª ‚Äî <a href=\'{link}\'>–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å –∫ —Å—Ä—ã–≤–∞–º.</a> –¢—ã –ø—Ä–æ–¥–µ—Ä–∂–∏—à—å—Å—è –Ω–µ–¥–µ–ª—é-–¥—Ä—É–≥—É—é, –ø–æ–ª—É—á–∏—à—å –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∞ –ø–æ—Ç–æ–º —Ç–∞–∫ –∂–µ —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–∞—Ç–∏—à—å—Å—è –Ω–∞–∑–∞–¥.\n\n–ß—Ç–æ–±—ã —ç—Ç–æ–≥–æ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å, —è –ø–æ—Å—Ç—Ä–æ—é –ø–ª–∞–≤–Ω—ã–π –ø—É—Ç—å –∏–∑ —Ç–≤–æ–µ–π –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ –∫ —Ü–µ–ª–∏. –î–ª—è —ç—Ç–æ–≥–æ –º–Ω–µ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫ —Ç—ã –ø–∏—Ç–∞–µ—à—å—Å—è —Å–µ–π—á–∞—Å. –Ø –∑–∞–¥–∞–º 5 –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Å—Ç–Ω–æ."
    buttons = [
        [InlineKeyboardButton(text="–ü–∞—Ä—É —Å—Ç–∞–∫–∞–Ω–æ–≤ –∏–ª–∏ –º–µ–Ω—å—à–µ", url="<2")],
        [InlineKeyboardButton(text="3‚Äì5 —Å—Ç–∞–∫–∞–Ω–æ–≤", url="3-5")],
        [InlineKeyboardButton(text="6 —Å—Ç–∞–∫–∞–Ω–æ–≤ –∏ –±–æ–ª—å—à–µ", url=">6")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer(text1)
    await message.answer(text)
    await message.answer(text2, reply_markup=keyboard)

async def process_water(message, state):
    text = "üü†üü†‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è \n–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –ø—å—ë—à—å –∞–ª–∫–æ–≥–æ–ª—å?"
    buttons = [
        [InlineKeyboardButton(text="–í–æ–æ–±—â–µ –Ω–µ –ø—å—é", url="0")],
        [InlineKeyboardButton(text="–ú–µ–Ω—å—à–µ 2—Ö –±–æ–∫–∞–ª–æ–≤/—Ä—é–º–æ–∫ –≤ –Ω–µ–¥–µ–ª—é", url="<2")],
        [InlineKeyboardButton(text="–ú–µ–Ω—å—à–µ 7 –±–æ–∫–∞–ª–æ–≤/—Ä—é–º–æ–∫ –≤ –Ω–µ–¥–µ–ª—é", url="2-6")],
        [InlineKeyboardButton(text="–ë–æ–ª—å—à–µ 7 –±–æ–∫–∞–ª–æ–≤ –≤ –Ω–µ–¥–µ–ª—é", url=">7")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.edit_text(text, reply_markup=keyboard)

async def process_booze(message, state):
    text = "üü†üü†üü†‚ö™Ô∏è‚ö™Ô∏è\n–°–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å,  –≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–∫—É—Å—ã?"
    buttons = [
        [InlineKeyboardButton(text="1", url="1")],
        [InlineKeyboardButton(text="2", url="2")],
        [InlineKeyboardButton(text="3", url="3")],
        [InlineKeyboardButton(text="4", url="4")],
        [InlineKeyboardButton(text="5", url="5")],
        [InlineKeyboardButton(text="6+", url="6+")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.edit_text(text, reply_markup=keyboard)

async def process_meals(message, state):
    text = "üü†üü†üü†üü†‚ö™Ô∏è\n–ö–∞–∫–∏–µ —ç—Ç–æ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏?   \n\n–û–ø–∏—à–∏ –≤ –ø–∞—Ä–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–≤–æ–π –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å –∏—Ö –≤ —á–∞—Ç.  \n\n–ù–∞–ø—Ä–∏–º–µ—Ä:  \n<i>¬´–û–±—ã—á–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≤—Ç—Ä–∞–∫, –Ω–æ –ø–ª–æ—Ç–Ω–æ –æ–±–µ–¥–∞—é –∏ —É–∂–∏–Ω–∞—é¬ª. \n¬´–ï–º —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å, –¥–≤–∞ —Ä–∞–∑–∞ –ø–µ—Ä–µ–∫—É—Å—ã–≤–∞—é —Å–ª–∞–¥–∫–∏–º¬ª. \n¬´–ù–µ—Ç —Ä–µ–∂–∏–º–∞ –ø–∏—Ç–∞–Ω–∏—è, –¥–µ–ª–∞—é –±–æ–ª—å—à–∏–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É –µ–¥–æ–π¬ª.</i>"
    buttons = [
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", url="None")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.edit_text(text, reply_markup=keyboard)

async def process_meals_extra(message, state):
    text = "üü†üü†üü†üü†üü†\n–ï—Å—Ç—å –ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –Ω–µ –µ—à—å?  \n–ù–∞–ø–∏—à–∏ –ø—Ä–æ –Ω–∏—Ö –≤ —á–∞—Ç.  \n\n–ù–∞–ø—Ä–∏–º–µ—Ä:  \n<i>¬´–ù–µ –µ–º –º—è—Å–æ –∏ –ø—Ç–∏—Ü—É¬ª  \n¬´–ù–µ –µ–º –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã¬ª \n¬´–ù–µ –µ–º –≥–ª—é—Ç–µ–Ω¬ª</i>"
    buttons = [
        [InlineKeyboardButton(text="–ï–º –≤—Å—ë!", url="None")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    try:
        await message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        await message.answer(text, reply_markup=keyboard)

async def process_allergies(message, state):
    # Empty function for allergies step
    pass

async def process_part3(message, state):
    # Empty function for part3 step
    pass

async def process_jogging(message, state):
    # Empty function for jogging step
    pass

async def process_lifting(message, state):
    # Empty function for lifting step
    pass

async def process_stress(message, state):
    # Empty function for stress step
    pass

async def process_sleep(message, state):
    # Empty function for sleep step
    pass

async def process_goal(message, state):
    # Empty function for goal step
    pass

async def process_w_loss(message, state):
    # Empty function for w_loss step
    pass

async def process_w_loss_amount(message, state):
    # Empty function for w_loss_amount step
    pass

async def process_city(message, state):
    # Empty function for city step
    pass

async def process_morning_ping(message, state):
    # Empty function for morning_ping step
    pass

async def process_evening_ping(message, state):
    # Empty function for evening_ping step
    pass

async def process_community_invite(message, state):
    # Empty function for community_invite step
    pass